import $ from 'jquery';
import React, { createElement, Component } from 'react';
import ReactDOM, { render, findDOMNode } from 'react-dom';
import { Canvas, Endpoint, Tips, Node } from 'butterfly-dag';
import 'butterfly-dag/dist/index.css';
import { get, isEmpty, some, assign, cloneDeep } from 'lodash';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var MappindCanvas = /*#__PURE__*/function (_Canvas) {
  _inherits(MappindCanvas, _Canvas);

  var _super = _createSuper(MappindCanvas);

  function MappindCanvas(opts) {
    var _this;

    _classCallCheck(this, MappindCanvas);

    _this = _super.call(this, opts);

    _defineProperty(_assertThisInitialized(_this), "_getEndpoint", function (point) {
      var _node = _this.getNode(point.nodeId);

      var _point = undefined;

      if (_node && point.originId) {
        _point = _node.getEndpoint(point.originId);
        return _point;
      } else {
        return point;
      }
    });

    _this.extraPos = opts.extraPos;
    return _this;
  }

  _createClass(MappindCanvas, [{
    key: "_calcPos",
    value: function _calcPos() {
      var sourceTop = 0 + _.get(this, 'extraPos.paddingTop', 0);

      var sourceLeft = 0 + _.get(this, 'extraPos.paddingLeft', 0);

      var souceNodes = this.nodes.filter(function (item) {
        return item.options.type === 'source';
      }).map(function (item) {
        item.moveTo(sourceLeft, sourceTop);
        sourceTop += item.height + item.PADDING_VERTICAL;
        return item;
      });

      var targetTop = 0 + _.get(this, 'extraPos.paddingTop', 0);

      var targetLeft = _.get(souceNodes, '[0].width', 0) + _.get(souceNodes, '[0].PADDING_HORIZONTAL', 0) + _.get(this, 'extraPos.paddingLeft', 0);

      this.nodes.filter(function (item) {
        return item.options.type === 'target';
      }).forEach(function (item) {
        item.moveTo(targetLeft, targetTop);
        targetTop += item.height + item.PADDING_VERTICAL;
        return item;
      });
    }
  }, {
    key: "_autoResize",
    value: function _autoResize(type) {
      var totalHeight = 0;
      var totleWidth = 0;
      var _sourceHeight = 0;
      var _targetHeight = 0;
      var souceNodes = this.nodes.filter(function (item) {
        return item.options.type === 'source';
      });
      var targetNodes = this.nodes.filter(function (item) {
        return item.options.type === 'target';
      });
      souceNodes.forEach(function (item) {
        _sourceHeight += item.height + item.PADDING_VERTICAL;
      });
      targetNodes.forEach(function (item) {
        _targetHeight += item.height + item.PADDING_VERTICAL;
      }); // 计算所有节点大小总和

      totalHeight = _sourceHeight > _targetHeight ? _sourceHeight : _targetHeight;
      totleWidth = _.get(souceNodes, '[0].width', 0) + _.get(souceNodes, '[0].PADDING_HORIZONTAL', 0) + _.get(targetNodes, '[0].width', 0) || 200; // 计算边缘

      totalHeight += _.get(this, 'extraPos.paddingTop', 0) + _.get(this, 'extraPos.paddingBottom', 0);
      totleWidth += _.get(this, 'extraPos.paddingLeft', 0) + _.get(this, 'extraPos.paddingRight', 0);

      if (type === 'width') {
        $(this.root).css('width', totleWidth);
      }

      if (type === 'height') {
        $(this.root).css('height', totalHeight);
      }

      this.updateRootResize();
    } // 纠正获取左右锚点

  }, {
    key: "_linkedChain",
    // 改变linked状态
    value: function _linkedChain(links) {
      var _this2 = this;

      links.forEach(function (edge) {
        var _sourceEndpoint = _this2._getEndpoint(edge.sourceEndpoint);

        var _targetEndpoint = _this2._getEndpoint(edge.targetEndpoint);

        _sourceEndpoint && $(_sourceEndpoint.dom).addClass('link');
        _targetEndpoint && $(_targetEndpoint.dom).addClass('link');
      });
    }
  }, {
    key: "_unLinkedChain",
    value: function _unLinkedChain(links) {
      var _this3 = this;

      links.forEach(function (edge) {
        var _sourceEndpoint = _this3._getEndpoint(edge.sourceEndpoint);

        var _targetEndpoint = _this3._getEndpoint(edge.targetEndpoint);

        _sourceEndpoint && $(_sourceEndpoint.dom).removeClass('link');
        _targetEndpoint && $(_targetEndpoint.dom).removeClass('link');
      });
    } // 聚焦链路

  }, {
    key: "_focusChain",
    value: function _focusChain(point) {
      var _this4 = this;

      var edges = this._findChain(point);

      edges.forEach(function (item) {
        _this4._changeFoucsStatus(item, true);
      });
    }
  }, {
    key: "_unFocusChain",
    value: function _unFocusChain(point) {
      var _this5 = this;

      var edges = this._findChain(point);

      edges.forEach(function (item) {
        _this5._changeFoucsStatus(item, false);
      });
    }
  }, {
    key: "_changeFoucsStatus",
    value: function _changeFoucsStatus(edge, status) {
      var _sourceEndpoint = this._getEndpoint(edge.sourceEndpoint);

      var _targetEndpoint = this._getEndpoint(edge.targetEndpoint);

      if (status) {
        $(edge.dom).addClass('focus');
        $(edge.arrowDom).addClass('focus');
        _sourceEndpoint && $(_sourceEndpoint.dom).addClass('focus');
        _targetEndpoint && $(_targetEndpoint.dom).addClass('focus');
      } else {
        $(edge.dom).removeClass('focus');
        $(edge.arrowDom).removeClass('focus');
        _sourceEndpoint && $(_sourceEndpoint.dom).removeClass('focus');
        _targetEndpoint && $(_targetEndpoint.dom).removeClass('focus');
      }
    }
  }, {
    key: "_findChain",
    value: function _findChain(point) {
      var type = point.type;
      var neighborEdges = this.getNeighborEdges(point.nodeId);
      var targetsEdges = neighborEdges.filter(function (item) {
        return item[type + 'Node'].id === point.nodeId && item[type + 'Endpoint'].originId === point.id;
      });
      return targetsEdges;
    } // 检查连接数量限制

  }, {
    key: "_checkLinkNum",
    value: function _checkLinkNum(point, targetEdge, type) {
      var _linkNums = this.edges.filter(function (_edge) {
        return _edge["".concat(type, "Node")].id === point.nodeId && _edge["".concat(type, "Endpoint")].id === point.id;
      }).length + 1;

      var _isValidLink = true;

      var _pointLimitedNum = -1;

      if (point.limitNum && typeof point.limitNum === "number") {
        if (_linkNums > point.limitNum) {
          _pointLimitedNum = point.limitNum;
          _isValidLink = false;
        }
      }

      if (point.limitNum && Object.prototype.toString.call(point.limitNum) === "[object Object]") {
        if (point.limitNum.source && type === "source") {
          if (_linkNums > point.limitNum.source) {
            _pointLimitedNum = point.limitNum.source;
            _isValidLink = false;
          }
        }

        if (point.limitNum.target && type === "target") {
          if (_linkNums > point.limitNum.target) {
            _pointLimitedNum = point.limitNum.target;
            _isValidLink = false;
          }
        }
      }

      if (!_isValidLink) {
        console.warn("id\u4E3A".concat(point.id, "\u7684\u951A\u70B9\u9650\u5236\u4E86").concat(_pointLimitedNum, "\u6761\u8FDE\u7EBF"));
        targetEdge && targetEdge.destroy();
        this._dragEdges = [];
        this._dragType = null;
      }

      return _isValidLink;
    }
  }]);

  return MappindCanvas;
}(Canvas);

var isReactEle = function isReactEle(HTMLElement) {
  return /*#__PURE__*/React.isValidElement(HTMLElement);
};
/**
 * params {Object} config
 * params {JSX.Element | String} config.content
 * params {Number | String} config.width
 */


var emptyDom = (function (config) {
  var content = config.content;
  var width = config.width;

  if (!width) {
    width = '150px';
  }

  if (typeof config.width === 'number') {
    width = config.width + 'px';
  }

  var emptyDom = '<div style="width: ' + width + '"></div>';

  if (content) {
    if (isReactEle(content)) {
      emptyDom = ReactDOM.render(content, document.createElement('div'));
    } else {
      emptyDom = $(content);
    }
  } else {
    emptyDom = $('<div class="no-data" style="width: ' + width + '"></div>');
    var iconDom = $('<i class="no-data-icon data-mapping-icon data-mapping-icon-kongshuju"></i>');
    emptyDom.append(iconDom);
  }

  return emptyDom;
});

var NewEndPoint = /*#__PURE__*/function (_Endpoint) {
  _inherits(NewEndPoint, _Endpoint);

  var _super = _createSuper(NewEndPoint);

  function NewEndPoint(opts) {
    var _this;

    _classCallCheck(this, NewEndPoint);

    _this = _super.call(this, opts);

    if (!_this.options._isNodeSelf) {
      _this.originId = (_this.id || '').replace('-left', '').replace('-right', '');
    }

    return _this;
  }

  _createClass(NewEndPoint, [{
    key: "attachEvent",
    value: function attachEvent() {
      var _this2 = this;

      $(this.dom).on('mousedown', function (e) {
        var LEFT_KEY = 0;

        if (e.button !== LEFT_KEY) {
          return;
        }

        e.preventDefault();
        e.stopPropagation(); // 点击中了上移/下移的按钮,需要阻止

        var classname = e.target.className || '';

        if (classname.indexOf('move-up') !== -1 || classname.indexOf('move-down') !== -1) {
          return;
        }

        if (_this2.options._isNodeSelf && _this2.type === 'target') {
          _this2.emit('custom.endpoint.dragNode', {
            data: _this2
          });
        } else {
          _this2.emit('InnerEvents', {
            type: 'endpoint:drag',
            data: _this2
          });
        }
      });

      if (this.options._isNodeSelf) {
        $(this.dom).on('mouseover', function (e) {
          _this2.emit('custom.endpoint.focus', {
            point: _this2
          });
        });
        $(this.dom).on('mouseout', function (e) {
          _this2.emit('custom.endpoint.unFocus', {
            point: _this2
          });
        });
      }
    }
  }]);

  return NewEndPoint;
}(Endpoint);

var TableNode = /*#__PURE__*/function (_Node) {
  _inherits(TableNode, _Node);

  var _super = _createSuper(TableNode);

  function TableNode(opts) {
    var _this;

    _classCallCheck(this, TableNode);

    _this = _super.call(this, opts); // 标题高度

    _this.TITLE_HEIGHT = 34; // 列标题高度

    _this.COLUMNS_TITLE_HEIGHT = 28; // 每列宽度

    _this.COLUMN_WIDTH = 60; // 每行高度

    _this.ROW_HEIGHT = 26; // 垂直间距

    _this.PADDING_VERTICAL = 10; // 水平间距

    _this.PADDING_HORIZONTAL = get(opts, '_extraPos.paddingCenter') || 150; // 排序宽度

    _this.SORTABLE_WIDTH = 40;
    _this.height = 0;
    _this.width = 0;
    _this.fieldsList = [];
    return _this;
  }

  _createClass(TableNode, [{
    key: "_addEventListener",
    value: function _addEventListener() {
      var _this2 = this;

      $(this.dom).on('mouseDown', function (e) {
        var LEFT_KEY = 0;

        if (e.button !== LEFT_KEY) {
          return;
        }

        if (_this2.draggable) {
          _this2._isMoving = true;

          _this2.emit('InnerEvents', {
            type: 'node:dragBegin',
            data: _this2
          });
        } else {
          // 单纯为了抛错事件给canvas，为了让canvas的dragtype不为空，不会触发canvas:click事件
          _this2.emit('InnerEvents', {
            type: 'node:mouseDown',
            data: _this2
          });

          return true;
        }
      });
    }
  }, {
    key: "mounted",
    value: function mounted() {
      this._createNodeEndpoint(); // 保持title宽度


      if (!this.fieldsList.length) {
        $(this.dom).find('.title').css('width', this.options._emptyWidth || 150);
      }

      var fieldItems = $(this.dom).find('.field-item');
      var fieldItemDoms = Array.prototype.slice.apply(fieldItems);
      fieldItemDoms.forEach(function (_fieldItem, index) {
        if (_fieldItem.scrollWidth > _fieldItem.clientWidth) {
          var fieldItem = $(fieldItems[index]);
          Tips.createTip({
            className: 'field-item-tooltip',
            targetDom: fieldItem[0],
            genTipDom: function genTipDom() {
              return fieldItem.text();
            }
          });
        }
      });
    }
  }, {
    key: "draw",
    value: function draw(obj) {
      var _dom = obj.dom;

      if (!_dom) {
        _dom = $('<div></div>').attr('class', 'node table-node').attr('id', obj.name);
      }

      if (!isEmpty(obj.options._sourceClassName) && get(obj, 'options.type') === 'source') {
        _dom.addClass(obj.options._sourceClassName);
      }

      if (!isEmpty(obj.options._targetClassName) && get(obj, 'options.type') === 'target') {
        _dom.addClass(obj.options._targetClassName);
      }

      var node = $(_dom); // 计算节点坐标

      if (obj.top !== undefined) {
        node.css('top', "".concat(obj.top + get(obj, 'options._extraPos.paddingTop', 0), "px"));
      }

      if (obj.left !== undefined) {
        node.css('left', "".concat(obj.left + get(obj, 'options._extraPos.paddingLeft', 0), "px"));
      }

      this._calcSize(node, obj);

      this._createTableName(node); // 表名


      this._createFieldTitle(node); // 字段标题


      this._createFields(node); // 字段


      return node[0];
    }
  }, {
    key: "_createTableName",
    value: function _createTableName() {
      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dom;

      var title = get(this, 'options.title');

      if (title) {
        var titleDom = $("<div class=\"title\">".concat(title, "</div>"));
        titleDom.css({
          'height': this.TITLE_HEIGHT + 'px',
          'line-height': this.TITLE_HEIGHT + 'px'
        });
        $(container).append(titleDom);
      }
    }
  }, {
    key: "_createFieldTitle",
    value: function _createFieldTitle() {
      var _this3 = this;

      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dom;

      var columns = get(this, 'options._columns', []);

      var hasFieldTitle = some(columns, function (item) {
        return item.title;
      });

      if (hasFieldTitle) {
        var columnsTitleDom = $('<div class="filed-title"></div>');
        columns.forEach(function (_col) {
          var columnsTitleItem = $("<span class=\"filed-title-item\">".concat(_col.title, "</span>"));
          columnsTitleItem.css('width', (_col.width || _this3.COLUMN_WIDTH) + 'px');
          columnsTitleDom.append(columnsTitleItem);
        });
        columnsTitleDom.css('height', this.COLUMNS_TITLE_HEIGHT + 'px').css('line-height', this.COLUMNS_TITLE_HEIGHT + 'px');
        container.append(columnsTitleDom);
      }
    }
  }, {
    key: "_createSortableBtn",
    value: function _createSortableBtn(field) {
      var sortFieldDom = $("\n      <span class=\"field-sort\">\n        <i class=\"data-mapping-icon data-mapping-icon-paixu-top move-up\"></i>\n        <i class=\"data-mapping-icon data-mapping-icon-paixu-bottom move-down\"></i>\n      </span>\n    ");
      sortFieldDom.css({
        width: this.SORTABLE_WIDTH + 'px'
      });
      sortFieldDom.find('.move-up').click(this._moveUp.bind(this, field));
      sortFieldDom.find('.move-down').click(this._moveDown.bind(this, field));
      return sortFieldDom;
    }
  }, {
    key: "_createFields",
    value: function _createFields() {
      var _this4 = this;

      var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dom;

      var fields = get(this, 'options.fields');

      var columns = get(this, 'options._columns', []);

      var sortable = get(this, 'options.sortable');

      var isObject = Object.prototype.toString.call(sortable) === "[object Object]";

      var type = get(this, 'options.type', '');

      if (fields && fields.length) {
        fields.forEach(function (_field, index) {
          var fieldDom = $('<div class="field"></div>');
          var _primaryKey = columns[0].key;
          var sortFieldDom = undefined;

          if (sortable && typeof sortable === 'boolean') {
            sortFieldDom = _this4._createSortableBtn(_field);
          }

          fieldDom.css({
            height: _this4.ROW_HEIGHT + 'px',
            'line-height': _this4.ROW_HEIGHT + 'px'
          });
          columns.forEach(function (_col) {
            if (_col.render) {
              var fieldItemDom = $("<span class=\"field-item\"></span>");
              fieldItemDom.css('width', (_col.width || _this4.COLUMN_WIDTH) + 'px');
              render(_col.render(_field[_col.key], _field, index), fieldItemDom[0]);
              fieldDom.append(fieldItemDom);
            } else {
              var _fieldItemDom = $("<span class=\"field-item\">".concat(_field[_col.key], "</span>"));

              _fieldItemDom.css('width', (_col.width || _this4.COLUMN_WIDTH) + 'px');

              fieldDom.append(_fieldItemDom);
            }

            if (_col.primaryKey) {
              _primaryKey = _col.key;
            }
          });

          if (sortFieldDom) {
            fieldDom.append(sortFieldDom);
          }

          if (type === 'source') {
            var rightPoint = $('<div class="point right-point"></div>');
            fieldDom.append(rightPoint);

            if (isObject && sortable.source) {
              sortFieldDom = _this4._createSortableBtn(_field);
              fieldDom.append(sortFieldDom);
            }
          }

          if (type === 'target') {
            var leftPoint = $('<div class="point left-point"></div>');
            fieldDom.append(leftPoint);

            if (isObject && sortable.target) {
              sortFieldDom = _this4._createSortableBtn(_field);
              fieldDom.append(sortFieldDom);
            }
          }

          container.append(fieldDom);

          _this4.fieldsList.push({
            id: _field[_primaryKey],
            dom: fieldDom
          });
        });
      } else {
        var _emptyContent = get(this.options, '_emptyContent');

        var noDataTree = emptyDom({
          content: _emptyContent,
          width: this.options._emptyWidth
        });
        container.append(noDataTree);
      }
    }
  }, {
    key: "_createNodeEndpoint",
    value: function _createNodeEndpoint() {
      var _this5 = this;

      var type = this.options.type;
      this.fieldsList.forEach(function (item) {
        _this5.addEndpoint({
          id: item.id,
          orientation: type === 'source' ? [1, 0] : [-1, 0],
          type: type,
          _isNodeSelf: true,
          dom: item.dom[0],
          Class: NewEndPoint
        });

        if (type === 'source') {
          _this5.addEndpoint({
            id: item.id + '-right',
            orientation: [1, 0],
            type: type,
            _isNodeSelf: false,
            dom: $(item.dom).find('.right-point')[0],
            Class: NewEndPoint,
            linkable: false
          });
        } else if (type === 'target') {
          _this5.addEndpoint({
            id: item.id + '-left',
            orientation: [-1, 0],
            type: type,
            _isNodeSelf: false,
            dom: $(item.dom).find('.left-point')[0],
            Class: NewEndPoint,
            disLinkable: false
          });
        }
      });
    }
  }, {
    key: "_calcSize",
    value: function _calcSize(node, obj) {
      var _this6 = this;

      var hasTitle = get(obj, 'options.title');

      var fields = get(obj, 'options.fields', []);

      var sortable = get(obj, 'options.sortable');

      var type = get(obj, 'options.type');

      if (hasTitle) {
        this.height += this.TITLE_HEIGHT;
      }

      this.height += fields.length * this.ROW_HEIGHT;

      var columns = get(obj, 'options._columns');

      columns.forEach(function (item) {
        _this6.width += item.width || _this6.COLUMN_WIDTH;
      });
      if (typeof sortable === 'boolean') this.width += this.SORTABLE_WIDTH;

      if (Object.prototype.toString.call(sortable) === '[object Object]') {
        if (type === 'source') this.width += this.SORTABLE_WIDTH;
        if (type === 'target') this.width += this.SORTABLE_WIDTH;
      } // todo: 记得算上SORTABLE_WIDTH

    }
  }, {
    key: "_moveUp",
    value: function _moveUp(curField, event) {
      event.preventDefault();
      event.stopPropagation();
      var curIndex = this.fieldsList.findIndex(function (i) {
        return i.id === curField.id;
      });

      var oldFields = get(this, 'options.fields', []);

      var oldFieldsItem = oldFields.splice(curIndex, 1);
      var point = this.getEndpoint(curField.id);
      var curFieldDom = point.dom;
      var curFieldData = this.fieldsList[curIndex]; // 处理边界

      if (curIndex === 0) {
        console.warn('this field has reach the top!');
        return;
      }

      var preFieldData = this.fieldsList[curIndex - 1];
      var preFieldDom = preFieldData.dom; // 交换dom

      $(preFieldDom).before(curFieldDom); // 交换数据

      this.fieldsList[curIndex] = preFieldData;
      this.fieldsList[curIndex - 1] = curFieldData;
      oldFields.splice(curIndex - 1, 0, oldFieldsItem[0]); // 发送事件，更新线段和锚点坐标

      this.emit('custom.field.sort', {
        nodeId: this.id,
        pointIds: [curFieldData.id, preFieldData.id]
      });
    }
  }, {
    key: "_moveDown",
    value: function _moveDown(curField, event) {
      event.preventDefault();
      event.stopPropagation();
      var curIndex = this.fieldsList.findIndex(function (i) {
        return i.id === curField.id;
      });

      var oldFields = get(this, 'options.fields', []);

      var oldFieldsItem = oldFields.splice(curIndex, 1);
      var point = this.getEndpoint(curField.id);
      var curFieldDom = point.dom;
      var curFieldData = this.fieldsList[curIndex]; // 处理边界

      if (curIndex === this.fieldsList.length - 1) {
        console.warn('this field has reach the bottom!');
        return;
      }

      var nextFieldData = this.fieldsList[curIndex + 1];
      var nextFieldDom = nextFieldData.dom; // 交换dom

      $(nextFieldDom).after(curFieldDom); // 交换数据

      this.fieldsList[curIndex] = nextFieldData;
      this.fieldsList[curIndex + 1] = curFieldData;
      oldFields.splice(curIndex + 1, 0, oldFieldsItem[0]); // 发送事件，更新线段和锚点坐标

      this.emit('custom.field.sort', {
        nodeId: this.id,
        pointIds: [curFieldData.id, nextFieldData.id]
      });
    }
  }]);

  return TableNode;
}(Node);

var transformInitData = function transformInitData(data) {
  var columns = data.columns,
      sourceData = data.sourceData,
      targetData = data.targetData,
      mappingData = data.mappingData,
      type = data.type,
      extraPos = data.extraPos,
      sortable = data.sortable,
      emptyContent = data.emptyContent,
      emptyWidth = data.emptyWidth,
      sourceClassName = data.sourceClassName,
      targetClassName = data.targetClassName;

  var _genNodes = function _genNodes(data, nodeType, comType) {
    if (comType === 'single' && data.constructor === Object) {
      return [assign({
        id: nodeType,
        type: nodeType,
        _columns: columns,
        _extraPos: extraPos,
        Class: TableNode,
        _emptyContent: emptyContent,
        _emptyWidth: emptyWidth,
        _sourceClassName: sourceClassName,
        _targetClassName: targetClassName,
        sortable: sortable
      }, data)];
    } else if (comType === 'mutiply' && data.constructor === Array) {
      return data.map(function (item) {
        return assign({
          type: nodeType,
          _columns: columns,
          _extraPos: extraPos,
          Class: TableNode,
          _emptyContent: emptyContent,
          _emptyWidth: emptyWidth,
          _sourceClassName: sourceClassName,
          _targetClassName: targetClassName,
          sortable: sortable
        }, item);
      });
    }
  };

  var sourceNodes = _genNodes(sourceData, 'source', type);

  var targetNodes = _genNodes(targetData, 'target', type);

  var edges = mappingData.map(function (item) {
    return {
      id: "".concat(item.source, "-").concat(item.target),
      type: 'endpoint',
      sourceNode: item.sourceNode || sourceNodes[0].id,
      source: item.source,
      targetNode: item.targetNode || targetNodes[0].id,
      target: item.target,
      _isConnect: data.isConnect
    };
  });
  return {
    nodes: [].concat(sourceNodes).concat(targetNodes),
    edges: edges
  };
};
var transformChangeData = function transformChangeData(data, comType) {
  var result = {
    mappingData: [],
    sourceData: [],
    targetData: []
  };
  var sourceNodes = data.nodes.filter(function (item) {
    return item.options.type === 'source';
  });
  var targetNodes = data.nodes.filter(function (item) {
    return item.options.type === 'target';
  });

  if (comType === 'single') {
    var _sourceNode = sourceNodes[0];
    var _targetNode = targetNodes[0];
    result.mappingData = data.edges.map(function (item) {
      return {
        source: item.sourceEndpoint.originId,
        target: item.targetEndpoint.originId
      };
    });
    result.sourceData = {
      title: get(_sourceNode, 'options.title'),
      fields: get(_sourceNode, 'options.fields')
    };
    result.targetData = {
      title: get(_targetNode, 'options.title'),
      fields: get(_targetNode, 'options.fields')
    };
  } else if (comType === 'mutiply') {
    result.mappingData = data.edges.map(function (item) {
      return {
        sourceNode: item.sourceNode.id,
        targetNode: item.targetNode.id,
        source: item.sourceEndpoint.originId,
        target: item.targetEndpoint.originId
      };
    });
    result.sourceData = sourceNodes.map(function (item) {
      return {
        title: get(item, 'options.title'),
        fields: get(item, 'options.fields')
      };
    });
    result.targetData = targetNodes.map(function (item) {
      return {
        title: get(item, 'options.title'),
        fields: get(item, 'options.fields')
      };
    });
  }

  return result;
};

var DataMapping = /** @class */ (function (_super) {
    __extends(DataMapping, _super);
    function DataMapping(props) {
        var _this = _super.call(this, props) || this;
        _this.canvas = null;
        return _this;
    }
    DataMapping.prototype.componentDidMount = function () {
        var _this = this;
        var root = findDOMNode(this);
        if (this.props.width !== undefined || this.props.width !== 'auto') {
            root.style.width = (this.props.width || 500) + 'px';
        }
        if (this.props.height !== undefined || this.props.height !== 'auto') {
            root.style.height = (this.props.height || 500) + 'px';
        }
        var result = transformInitData({
            columns: this.props.columns,
            type: this.props.type || 'single',
            sortable: get(this.props, 'config.sortable') || false,
            sourceData: cloneDeep(this.props.sourceData),
            targetData: cloneDeep(this.props.targetData),
            mappingData: cloneDeep(this.props.mappingData),
            extraPos: get(this.props, 'config.extraPos'),
            linkNumLimit: get(this.props, 'config.linkNumLimit'),
            emptyContent: this.props.emptyContent,
            emptyWidth: this.props.emptyWidth,
            sourceClassName: this.props.sourceClassName || '',
            targetClassName: this.props.targetClassName || ''
        });
        var canvasObj = {
            root: root,
            disLinkable: true,
            linkable: true,
            draggable: false,
            zoomable: false,
            moveable: false,
            theme: {
                edge: {
                    type: 'AdvancedBezier',
                    arrow: true,
                    isExpandWidth: true,
                    arrowPosition: 1,
                    arrowOffset: 5
                },
                endpoint: {
                    limitNum: undefined,
                    expandArea: {
                        left: 0,
                        right: 0,
                        top: 0,
                        botton: 0
                    }
                }
            },
            extraPos: get(this.props, 'config.extraPos')
        };
        var _linkNumLimit = get(this.props, 'config.linkNumLimit');
        if (typeof _linkNumLimit === 'number' && !isNaN(_linkNumLimit)) {
            canvasObj.theme.endpoint.limitNum = _linkNumLimit;
        }
        if (Object.prototype.toString.call(_linkNumLimit) === '[object Object]') {
            canvasObj.theme.endpoint.limitNum = _linkNumLimit;
        }
        this.canvas = new MappindCanvas(canvasObj);
        setTimeout(function () {
            _this.canvas.draw(result, function () {
                _this.canvas._calcPos();
                if (_this.props.width === 'auto') {
                    _this.canvas._autoResize('width');
                }
                if (_this.props.height === 'auto') {
                    _this.canvas._autoResize('height');
                }
                _this.props.onLoaded && _this.props.onLoaded(_this.canvas);
            });
            _this._addEventListener();
        }, get(this.props, 'config.delayDraw', 0));
    };
    DataMapping.prototype.onChange = function () {
        var result = transformChangeData(this.canvas.getDataMap(), this.props.type || 'single');
        this.props.onChange && this.props.onChange(result);
    };
    DataMapping.prototype._genClassName = function () {
        var classname = '';
        if (this.props.className) {
            classname = this.props.className + ' butterfly-data-mapping';
        }
        else {
            classname = 'butterfly-data-mapping';
        }
        return classname;
    };
    DataMapping.prototype._addEventListener = function () {
        var _this = this;
        var _addLinks = function (links) {
            var newLinkOpts = links.map(function (item) {
                var _oldSource = get(item, 'sourceEndpoint.id', '');
                var _oldTarget = get(item, 'targetEndpoint.id', '');
                var _newSource = _oldSource.indexOf('-right') !== -1 ? _oldSource : _oldSource + '-right';
                var _newTarget = _oldTarget.indexOf('-left') !== -1 ? _oldTarget : _oldTarget + '-left';
                return {
                    id: item.options.id,
                    sourceNode: item.options.sourceNode,
                    targetNode: item.options.targetNode,
                    source: _newSource,
                    target: _newTarget,
                    type: 'endpoint'
                };
            });
            _this.canvas.removeEdges(links, true);
            newLinkOpts = newLinkOpts.filter(function (item) {
                var targetNode = _this.canvas.getNode(item.targetNode);
                var targetEndpoint = targetNode.getEndpoint(item.target);
                var sourceEndpoint = targetNode.getEndpoint(item.source);
                var result = _this.canvas._checkLinkNum(targetEndpoint, undefined, 'target');
                // 取消link状态
                if (!result) {
                    sourceEndpoint && $(sourceEndpoint.dom).removeClass('link');
                }
                return result;
            });
            return _this.canvas.addEdges(newLinkOpts, true);
        };
        var _isInit = true;
        this.canvas.on('system.link.connect', function (data) {
            var addEdges = _addLinks(data.links || []);
            var result = [];
            addEdges.forEach(function (item) {
                var isConnect = true;
                _this.props.isConnect && (isConnect = _this.props.isConnect(item));
                if (isConnect) {
                    result.push(item);
                }
                else {
                    _this.canvas.removeEdge(item, true);
                }
            });
            if (!_isInit) {
                _this.onChange();
            }
            _isInit = false;
            _this.canvas._linkedChain(result);
        });
        this.canvas.on('system.link.reconnect', function (data) {
            var addEdges = _addLinks(data.addLinks || []);
            var result = [];
            addEdges.forEach(function (item) {
                var isConnect = true;
                _this.props.isConnect && (isConnect = _this.props.isConnect(item));
                if (isConnect) {
                    result.push(item);
                }
                else {
                    _this.canvas.removeEdge(item, true);
                }
            });
            _this.onChange();
            _this.canvas._unLinkedChain(data.delLinks);
            _this.canvas._linkedChain(result);
        });
        this.canvas.on('system.links.delete', function (data) {
            _this.onChange();
            _this.canvas._unLinkedChain(data.links);
        });
        // 线段删除特殊处理
        this.canvas.on('custom.endpoint.dragNode', function (data) {
            var point = data.data;
            var node = _this.canvas.getNode(point.nodeId);
            var linkedPoint = node.getEndpoint(point.id + '-left', 'target');
            _this.canvas.emit('InnerEvents', {
                type: 'endpoint:drag',
                data: linkedPoint
            });
        });
        // 连线特殊处理
        this.canvas.on('system.drag.move', function (data) {
            var dragEdge = get(data, 'dragEdges[0]');
            var sourcePointId = get(dragEdge, 'sourceEndpoint.id', '');
            if (sourcePointId.indexOf('right') === -1) {
                var souceNode = get(dragEdge, 'sourceNode');
                var newSourcePoint = souceNode.getEndpoint(sourcePointId + '-right');
                dragEdge.sourceEndpoint = newSourcePoint;
                dragEdge.options.sourceEndpoint = newSourcePoint;
                _this.canvas._checkLinkNum(newSourcePoint, dragEdge, 'source');
            }
        });
        // 聚焦链路
        this.canvas.on('custom.endpoint.focus', function (data) {
            _this.canvas._focusChain(data.point);
            _this.props.onRowMouseOver && _this.props.onRowMouseOver(data.point);
        });
        // 失焦链路
        this.canvas.on('custom.endpoint.unFocus', function (data) {
            _this.canvas._unFocusChain(data.point);
            _this.props.onRowMouseOut && _this.props.onRowMouseOut(data.point);
        });
        // 字段重新排列
        this.canvas.on('custom.field.sort', function (data) {
            var nodeId = data.nodeId, pointIds = data.pointIds;
            var node = _this.canvas.getNode(nodeId);
            if (!node) {
                return;
            }
            pointIds.forEach(function (pointId) {
                var fieldPoints = [
                    node.getEndpoint(pointId),
                    node.getEndpoint(pointId + '-left'),
                    node.getEndpoint(pointId + '-right')
                ];
                fieldPoints.forEach(function (point) {
                    if (!point) {
                        return;
                    }
                    point.updatePos();
                });
                var updateEdges = _this.canvas.edges.filter(function (item) {
                    if (nodeId === item.sourceNode.id && (pointId + '-right' === item.sourceEndpoint.id)) {
                        return true;
                    }
                    if (nodeId === item.targetNode.id && (pointId + '-left' === item.targetEndpoint.id)) {
                        return true;
                    }
                    return false;
                });
                updateEdges.forEach(function (item) {
                    item.redraw();
                });
                _this.onChange();
            });
        });
    };
    DataMapping.prototype.render = function () {
        return (createElement("div", { className: this._genClassName() }));
    };
    return DataMapping;
}(Component));

export default DataMapping;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9jYW52YXMvY2FudmFzLmpzIiwiLi4vc3JjL2NhbnZhcy9lbXB0eS5qcyIsIi4uL3NyYy9jYW52YXMvZW5kcG9pbnQuanMiLCIuLi9zcmMvY2FudmFzL25vZGUuanMiLCIuLi9zcmMvYWRhcHRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7Q2FudmFzfSBmcm9tICdidXR0ZXJmbHktZGFnJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcHBpbmRDYW52YXMgZXh0ZW5kcyBDYW52YXMge1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgdGhpcy5leHRyYVBvcyA9IG9wdHMuZXh0cmFQb3M7XG4gIH1cbiAgX2NhbGNQb3MoKSB7XG4gICAgbGV0IHNvdXJjZVRvcCA9IDAgKyBfLmdldCh0aGlzLCAnZXh0cmFQb3MucGFkZGluZ1RvcCcsIDApO1xuICAgIGxldCBzb3VyY2VMZWZ0ID0gMCArIF8uZ2V0KHRoaXMsICdleHRyYVBvcy5wYWRkaW5nTGVmdCcsIDApO1xuICAgIGxldCBzb3VjZU5vZGVzID0gdGhpcy5ub2Rlcy5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiBpdGVtLm9wdGlvbnMudHlwZSA9PT0gJ3NvdXJjZSc7XG4gICAgfSkubWFwKChpdGVtKSA9PiB7XG4gICAgICBpdGVtLm1vdmVUbyhzb3VyY2VMZWZ0LCBzb3VyY2VUb3ApO1xuICAgICAgc291cmNlVG9wICs9IGl0ZW0uaGVpZ2h0ICsgaXRlbS5QQURESU5HX1ZFUlRJQ0FMO1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG5cbiAgICBsZXQgdGFyZ2V0VG9wID0gMCArIF8uZ2V0KHRoaXMsICdleHRyYVBvcy5wYWRkaW5nVG9wJywgMCk7XG4gICAgbGV0IHRhcmdldExlZnQgPSBfLmdldChzb3VjZU5vZGVzLCAnWzBdLndpZHRoJywgMCkgKyBfLmdldChzb3VjZU5vZGVzLCAnWzBdLlBBRERJTkdfSE9SSVpPTlRBTCcsIDApICsgXy5nZXQodGhpcywgJ2V4dHJhUG9zLnBhZGRpbmdMZWZ0JywgMCk7XG4gICAgdGhpcy5ub2Rlcy5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiBpdGVtLm9wdGlvbnMudHlwZSA9PT0gJ3RhcmdldCc7XG4gICAgfSkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaXRlbS5tb3ZlVG8odGFyZ2V0TGVmdCwgdGFyZ2V0VG9wKTtcbiAgICAgIHRhcmdldFRvcCArPSBpdGVtLmhlaWdodCArIGl0ZW0uUEFERElOR19WRVJUSUNBTDtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xuICB9XG4gIF9hdXRvUmVzaXplKHR5cGUpIHtcbiAgICBsZXQgdG90YWxIZWlnaHQgPSAwO1xuICAgIGxldCB0b3RsZVdpZHRoID0gMDtcblxuICAgIGxldCBfc291cmNlSGVpZ2h0ID0gMDtcbiAgICBsZXQgX3RhcmdldEhlaWdodCA9IDA7XG5cbiAgICBsZXQgc291Y2VOb2RlcyA9IHRoaXMubm9kZXMuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4gaXRlbS5vcHRpb25zLnR5cGUgPT09ICdzb3VyY2UnO1xuICAgIH0pO1xuICAgIGxldCB0YXJnZXROb2RlcyA9IHRoaXMubm9kZXMuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4gaXRlbS5vcHRpb25zLnR5cGUgPT09ICd0YXJnZXQnO1xuICAgIH0pO1xuICAgIFxuICAgIHNvdWNlTm9kZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgX3NvdXJjZUhlaWdodCArPSBpdGVtLmhlaWdodCArIGl0ZW0uUEFERElOR19WRVJUSUNBTDtcbiAgICB9KTtcblxuICAgIHRhcmdldE5vZGVzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIF90YXJnZXRIZWlnaHQgKz0gaXRlbS5oZWlnaHQgKyBpdGVtLlBBRERJTkdfVkVSVElDQUw7XG4gICAgfSk7XG5cbiAgICAvLyDorqHnrpfmiYDmnInoioLngrnlpKflsI/mgLvlkoxcbiAgICB0b3RhbEhlaWdodCA9IF9zb3VyY2VIZWlnaHQgPiBfdGFyZ2V0SGVpZ2h0ID8gX3NvdXJjZUhlaWdodCA6IF90YXJnZXRIZWlnaHQ7XG4gICAgdG90bGVXaWR0aCA9IChfLmdldChzb3VjZU5vZGVzLCAnWzBdLndpZHRoJywgMCkgKyBfLmdldChzb3VjZU5vZGVzLCAnWzBdLlBBRERJTkdfSE9SSVpPTlRBTCcsIDApICsgXy5nZXQodGFyZ2V0Tm9kZXMsICdbMF0ud2lkdGgnLCAwKSkgfHwgMjAwO1xuICAgIFxuICAgIC8vIOiuoeeul+i+uee8mFxuICAgIHRvdGFsSGVpZ2h0ICs9IF8uZ2V0KHRoaXMsICdleHRyYVBvcy5wYWRkaW5nVG9wJywgMCkgKyBfLmdldCh0aGlzLCAnZXh0cmFQb3MucGFkZGluZ0JvdHRvbScsIDApO1xuICAgIHRvdGxlV2lkdGggKz1fLmdldCh0aGlzLCAnZXh0cmFQb3MucGFkZGluZ0xlZnQnLCAwKSArIF8uZ2V0KHRoaXMsICdleHRyYVBvcy5wYWRkaW5nUmlnaHQnLCAwKTtcblxuICAgIGlmICh0eXBlID09PSAnd2lkdGgnKSB7XG4gICAgICAkKHRoaXMucm9vdCkuY3NzKCd3aWR0aCcsIHRvdGxlV2lkdGgpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ2hlaWdodCcpIHtcbiAgICAgICQodGhpcy5yb290KS5jc3MoJ2hlaWdodCcsIHRvdGFsSGVpZ2h0KTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVSb290UmVzaXplKCk7XG4gIH1cbiAgLy8g57qg5q2j6I635Y+W5bem5Y+z6ZSa54K5XG4gIF9nZXRFbmRwb2ludCA9IChwb2ludCkgPT4ge1xuICAgIGxldCBfbm9kZSA9IHRoaXMuZ2V0Tm9kZShwb2ludC5ub2RlSWQpO1xuICAgIGxldCBfcG9pbnQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKF9ub2RlICYmIHBvaW50Lm9yaWdpbklkKSB7XG4gICAgICBfcG9pbnQgPSBfbm9kZS5nZXRFbmRwb2ludChwb2ludC5vcmlnaW5JZCk7XG4gICAgICByZXR1cm4gX3BvaW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuICB9O1xuICAvLyDmlLnlj5hsaW5rZWTnirbmgIFcbiAgX2xpbmtlZENoYWluKGxpbmtzKSB7XG4gICAgbGlua3MuZm9yRWFjaCgoZWRnZSkgPT4ge1xuICAgICAgbGV0IF9zb3VyY2VFbmRwb2ludCA9IHRoaXMuX2dldEVuZHBvaW50KGVkZ2Uuc291cmNlRW5kcG9pbnQpO1xuICAgICAgbGV0IF90YXJnZXRFbmRwb2ludCA9IHRoaXMuX2dldEVuZHBvaW50KGVkZ2UudGFyZ2V0RW5kcG9pbnQpO1xuICAgICAgX3NvdXJjZUVuZHBvaW50ICYmICQoX3NvdXJjZUVuZHBvaW50LmRvbSkuYWRkQ2xhc3MoJ2xpbmsnKTtcbiAgICAgIF90YXJnZXRFbmRwb2ludCAmJiAkKF90YXJnZXRFbmRwb2ludC5kb20pLmFkZENsYXNzKCdsaW5rJyk7XG4gICAgfSk7XG4gIH1cbiAgX3VuTGlua2VkQ2hhaW4obGlua3MpIHtcbiAgICBsaW5rcy5mb3JFYWNoKChlZGdlKSA9PiB7XG4gICAgICBsZXQgX3NvdXJjZUVuZHBvaW50ID0gdGhpcy5fZ2V0RW5kcG9pbnQoZWRnZS5zb3VyY2VFbmRwb2ludCk7XG4gICAgICBsZXQgX3RhcmdldEVuZHBvaW50ID0gdGhpcy5fZ2V0RW5kcG9pbnQoZWRnZS50YXJnZXRFbmRwb2ludCk7XG4gICAgICBfc291cmNlRW5kcG9pbnQgJiYgJChfc291cmNlRW5kcG9pbnQuZG9tKS5yZW1vdmVDbGFzcygnbGluaycpO1xuICAgICAgX3RhcmdldEVuZHBvaW50ICYmICQoX3RhcmdldEVuZHBvaW50LmRvbSkucmVtb3ZlQ2xhc3MoJ2xpbmsnKTtcbiAgICB9KTtcbiAgfVxuICAvLyDogZrnhKbpk77ot69cbiAgX2ZvY3VzQ2hhaW4ocG9pbnQpIHtcbiAgICBsZXQgZWRnZXMgPSB0aGlzLl9maW5kQ2hhaW4ocG9pbnQpO1xuICAgIGVkZ2VzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIHRoaXMuX2NoYW5nZUZvdWNzU3RhdHVzKGl0ZW0sIHRydWUpO1xuICAgIH0pO1xuICB9XG4gIF91bkZvY3VzQ2hhaW4ocG9pbnQpIHtcbiAgICBsZXQgZWRnZXMgPSB0aGlzLl9maW5kQ2hhaW4ocG9pbnQpO1xuICAgIGVkZ2VzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIHRoaXMuX2NoYW5nZUZvdWNzU3RhdHVzKGl0ZW0sIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuICBfY2hhbmdlRm91Y3NTdGF0dXMoZWRnZSwgc3RhdHVzKSB7XG5cbiAgICBsZXQgX3NvdXJjZUVuZHBvaW50ID0gdGhpcy5fZ2V0RW5kcG9pbnQoZWRnZS5zb3VyY2VFbmRwb2ludCk7XG4gICAgbGV0IF90YXJnZXRFbmRwb2ludCA9IHRoaXMuX2dldEVuZHBvaW50KGVkZ2UudGFyZ2V0RW5kcG9pbnQpO1xuXG4gICAgaWYgKHN0YXR1cykge1xuICAgICAgJChlZGdlLmRvbSkuYWRkQ2xhc3MoJ2ZvY3VzJyk7XG4gICAgICAkKGVkZ2UuYXJyb3dEb20pLmFkZENsYXNzKCdmb2N1cycpO1xuICAgICAgX3NvdXJjZUVuZHBvaW50ICYmICQoX3NvdXJjZUVuZHBvaW50LmRvbSkuYWRkQ2xhc3MoJ2ZvY3VzJyk7XG4gICAgICBfdGFyZ2V0RW5kcG9pbnQgJiYgJChfdGFyZ2V0RW5kcG9pbnQuZG9tKS5hZGRDbGFzcygnZm9jdXMnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChlZGdlLmRvbSkucmVtb3ZlQ2xhc3MoJ2ZvY3VzJyk7XG4gICAgICAkKGVkZ2UuYXJyb3dEb20pLnJlbW92ZUNsYXNzKCdmb2N1cycpO1xuICAgICAgX3NvdXJjZUVuZHBvaW50ICYmICQoX3NvdXJjZUVuZHBvaW50LmRvbSkucmVtb3ZlQ2xhc3MoJ2ZvY3VzJyk7XG4gICAgICBfdGFyZ2V0RW5kcG9pbnQgJiYgJChfdGFyZ2V0RW5kcG9pbnQuZG9tKS5yZW1vdmVDbGFzcygnZm9jdXMnKTtcbiAgICB9XG4gIH1cbiAgX2ZpbmRDaGFpbihwb2ludCkge1xuICAgIGxldCB0eXBlID0gcG9pbnQudHlwZTtcbiAgICBsZXQgbmVpZ2hib3JFZGdlcyA9IHRoaXMuZ2V0TmVpZ2hib3JFZGdlcyhwb2ludC5ub2RlSWQpO1xuICAgIGxldCB0YXJnZXRzRWRnZXMgPSBuZWlnaGJvckVkZ2VzLmZpbHRlcigoaXRlbSkgPT4ge1xuICAgICAgcmV0dXJuIGl0ZW1bdHlwZSArICdOb2RlJ10uaWQgPT09IHBvaW50Lm5vZGVJZCAmJiBpdGVtW3R5cGUgKyAnRW5kcG9pbnQnXS5vcmlnaW5JZCA9PT0gcG9pbnQuaWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldHNFZGdlcztcbiAgfVxuXG4gIC8vIOajgOafpei/nuaOpeaVsOmHj+mZkOWItlxuICBfY2hlY2tMaW5rTnVtKHBvaW50LCB0YXJnZXRFZGdlLCB0eXBlKSB7XG4gICAgbGV0IF9saW5rTnVtcyA9XG4gICAgICB0aGlzLmVkZ2VzLmZpbHRlcigoX2VkZ2UpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBfZWRnZVtgJHt0eXBlfU5vZGVgXS5pZCA9PT0gcG9pbnQubm9kZUlkICYmXG4gICAgICAgICAgX2VkZ2VbYCR7dHlwZX1FbmRwb2ludGBdLmlkID09PSBwb2ludC5pZFxuICAgICAgICApO1xuICAgICAgfSkubGVuZ3RoICsgMTtcbiAgICBsZXQgX2lzVmFsaWRMaW5rID0gdHJ1ZTtcbiAgICBsZXQgX3BvaW50TGltaXRlZE51bSA9IC0xO1xuICAgIGlmIChwb2ludC5saW1pdE51bSAmJiB0eXBlb2YgcG9pbnQubGltaXROdW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGlmIChfbGlua051bXMgPiBwb2ludC5saW1pdE51bSkge1xuICAgICAgICBfcG9pbnRMaW1pdGVkTnVtID0gcG9pbnQubGltaXROdW07XG4gICAgICAgIF9pc1ZhbGlkTGluayA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoXG4gICAgICBwb2ludC5saW1pdE51bSAmJlxuICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHBvaW50LmxpbWl0TnVtKSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgICkge1xuICAgICAgaWYgKHBvaW50LmxpbWl0TnVtLnNvdXJjZSAmJiB0eXBlID09PSBcInNvdXJjZVwiKSB7XG4gICAgICAgIGlmIChfbGlua051bXMgPiBwb2ludC5saW1pdE51bS5zb3VyY2UpIHtcbiAgICAgICAgICBfcG9pbnRMaW1pdGVkTnVtID0gcG9pbnQubGltaXROdW0uc291cmNlO1xuICAgICAgICAgIF9pc1ZhbGlkTGluayA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocG9pbnQubGltaXROdW0udGFyZ2V0ICYmIHR5cGUgPT09IFwidGFyZ2V0XCIpIHtcbiAgICAgICAgaWYgKF9saW5rTnVtcyA+IHBvaW50LmxpbWl0TnVtLnRhcmdldCkge1xuICAgICAgICAgIF9wb2ludExpbWl0ZWROdW09IHBvaW50LmxpbWl0TnVtLnRhcmdldDtcbiAgICAgICAgICBfaXNWYWxpZExpbmsgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIV9pc1ZhbGlkTGluaykge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgaWTkuLoke3BvaW50LmlkfeeahOmUmueCuemZkOWItuS6hiR7X3BvaW50TGltaXRlZE51bX3mnaHov57nur9gXG4gICAgICApO1xuICAgICAgdGFyZ2V0RWRnZSAmJiB0YXJnZXRFZGdlLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuX2RyYWdFZGdlcyA9IFtdO1xuICAgICAgdGhpcy5fZHJhZ1R5cGUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gX2lzVmFsaWRMaW5rO1xuICB9XG59OyIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5cbmNvbnN0IGlzUmVhY3RFbGUgPSAoSFRNTEVsZW1lbnQpID0+IHtcbiAgcmV0dXJuIFJlYWN0LmlzVmFsaWRFbGVtZW50KEhUTUxFbGVtZW50KTtcbn07XG5cbi8qKlxuICogcGFyYW1zIHtPYmplY3R9IGNvbmZpZ1xuICogcGFyYW1zIHtKU1guRWxlbWVudCB8IFN0cmluZ30gY29uZmlnLmNvbnRlbnRcbiAqIHBhcmFtcyB7TnVtYmVyIHwgU3RyaW5nfSBjb25maWcud2lkdGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZykgPT4ge1xuICBjb25zdCBjb250ZW50ID0gY29uZmlnLmNvbnRlbnQ7XG4gIGxldCB3aWR0aCA9IGNvbmZpZy53aWR0aDtcblxuICBpZiAoIXdpZHRoKSB7XG4gICAgd2lkdGggPSAnMTUwcHgnO1xuICB9XG4gIFxuICBpZiAodHlwZW9mIGNvbmZpZy53aWR0aCA9PT0gJ251bWJlcicpIHtcbiAgICB3aWR0aCA9IGNvbmZpZy53aWR0aCArICdweCc7XG4gIH1cblxuICBsZXQgZW1wdHlEb20gPSAnPGRpdiBzdHlsZT1cIndpZHRoOiAnICsgd2lkdGggKyAnXCI+PC9kaXY+JztcblxuICBpZiAoY29udGVudCkge1xuICAgIGlmIChpc1JlYWN0RWxlKGNvbnRlbnQpKSB7XG4gICAgICBlbXB0eURvbSA9IFJlYWN0RE9NLnJlbmRlcihjb250ZW50LCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVtcHR5RG9tID0gJChjb250ZW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZW1wdHlEb20gPSAkKCc8ZGl2IGNsYXNzPVwibm8tZGF0YVwiIHN0eWxlPVwid2lkdGg6ICcgKyB3aWR0aCArICdcIj48L2Rpdj4nKTtcbiAgICBjb25zdCBpY29uRG9tID0gJCgnPGkgY2xhc3M9XCJuby1kYXRhLWljb24gZGF0YS1tYXBwaW5nLWljb24gZGF0YS1tYXBwaW5nLWljb24ta29uZ3NodWp1XCI+PC9pPicpO1xuICBcbiAgICBlbXB0eURvbS5hcHBlbmQoaWNvbkRvbSk7XG4gIH1cblxuICByZXR1cm4gZW1wdHlEb207XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge0VuZHBvaW50fSBmcm9tICdidXR0ZXJmbHktZGFnJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmNsYXNzIE5ld0VuZFBvaW50IGV4dGVuZHMgRW5kcG9pbnQge1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuX2lzTm9kZVNlbGYpIHtcbiAgICAgIHRoaXMub3JpZ2luSWQgPSAodGhpcy5pZCB8fCAnJykucmVwbGFjZSgnLWxlZnQnLCAnJykucmVwbGFjZSgnLXJpZ2h0JywgJycpO1xuICAgIH1cbiAgfVxuICBhdHRhY2hFdmVudCgpIHtcbiAgICAkKHRoaXMuZG9tKS5vbignbW91c2Vkb3duJywgKGUpID0+IHtcbiAgICAgIGNvbnN0IExFRlRfS0VZID0gMDtcbiAgICAgIGlmIChlLmJ1dHRvbiAhPT0gTEVGVF9LRVkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuXG4gICAgICAvLyDngrnlh7vkuK3kuobkuIrnp7sv5LiL56e755qE5oyJ6ZKuLOmcgOimgemYu+atolxuICAgICAgbGV0IGNsYXNzbmFtZSA9IGUudGFyZ2V0LmNsYXNzTmFtZSB8fCAnJztcbiAgICAgIGlmIChjbGFzc25hbWUuaW5kZXhPZignbW92ZS11cCcpICE9PSAtMSB8fCBjbGFzc25hbWUuaW5kZXhPZignbW92ZS1kb3duJykgIT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5faXNOb2RlU2VsZiAmJiB0aGlzLnR5cGUgPT09ICd0YXJnZXQnKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnY3VzdG9tLmVuZHBvaW50LmRyYWdOb2RlJywge1xuICAgICAgICAgIGRhdGE6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVtaXQoJ0lubmVyRXZlbnRzJywge1xuICAgICAgICAgIHR5cGU6ICdlbmRwb2ludDpkcmFnJyxcbiAgICAgICAgICBkYXRhOiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5faXNOb2RlU2VsZikge1xuICAgICAgJCh0aGlzLmRvbSkub24oJ21vdXNlb3ZlcicsIChlKSA9PiB7XG4gICAgICAgIHRoaXMuZW1pdCgnY3VzdG9tLmVuZHBvaW50LmZvY3VzJywge1xuICAgICAgICAgIHBvaW50OiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIFxuICAgICAgJCh0aGlzLmRvbSkub24oJ21vdXNlb3V0JywgKGUpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KCdjdXN0b20uZW5kcG9pbnQudW5Gb2N1cycsIHtcbiAgICAgICAgICBwb2ludDogdGhpc1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZXdFbmRQb2ludDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtOb2RlfSBmcm9tICdidXR0ZXJmbHktZGFnJztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtUaXBzfSBmcm9tICdidXR0ZXJmbHktZGFnJztcbmltcG9ydCBlbXB0eURvbSBmcm9tICcuL2VtcHR5JztcbmltcG9ydCBFbmRwb2ludCBmcm9tICcuL2VuZHBvaW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFibGVOb2RlIGV4dGVuZHMgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcihvcHRzKTtcbiAgICAvLyDmoIfpopjpq5jluqZcbiAgICB0aGlzLlRJVExFX0hFSUdIVCA9IDM0O1xuICAgIC8vIOWIl+agh+mimOmrmOW6plxuICAgIHRoaXMuQ09MVU1OU19USVRMRV9IRUlHSFQgPSAyODtcbiAgICAvLyDmr4/liJflrr3luqZcbiAgICB0aGlzLkNPTFVNTl9XSURUSCA9IDYwO1xuICAgIC8vIOavj+ihjOmrmOW6plxuICAgIHRoaXMuUk9XX0hFSUdIVCA9IDI2O1xuICAgIC8vIOWeguebtOmXtOi3nVxuICAgIHRoaXMuUEFERElOR19WRVJUSUNBTCA9IDEwO1xuICAgIC8vIOawtOW5s+mXtOi3nVxuICAgIHRoaXMuUEFERElOR19IT1JJWk9OVEFMID0gXy5nZXQob3B0cywgJ19leHRyYVBvcy5wYWRkaW5nQ2VudGVyJykgfHwgMTUwO1xuICAgIC8vIOaOkuW6j+WuveW6plxuICAgIHRoaXMuU09SVEFCTEVfV0lEVEggPSA0MDtcblxuICAgIHRoaXMuaGVpZ2h0ID0gMDtcbiAgICB0aGlzLndpZHRoID0gMDtcblxuICAgIHRoaXMuZmllbGRzTGlzdCA9IFtdO1xuICB9XG4gIF9hZGRFdmVudExpc3RlbmVyKCkge1xuICAgICQodGhpcy5kb20pLm9uKCdtb3VzZURvd24nLCAoZSkgPT4ge1xuICAgICAgY29uc3QgTEVGVF9LRVkgPSAwO1xuICAgICAgaWYgKGUuYnV0dG9uICE9PSBMRUZUX0tFWSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRyYWdnYWJsZSkge1xuICAgICAgICB0aGlzLl9pc01vdmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZW1pdCgnSW5uZXJFdmVudHMnLCB7XG4gICAgICAgICAgdHlwZTogJ25vZGU6ZHJhZ0JlZ2luJyxcbiAgICAgICAgICBkYXRhOiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g5Y2V57qv5Li65LqG5oqb6ZSZ5LqL5Lu257uZY2FudmFz77yM5Li65LqG6K6pY2FudmFz55qEZHJhZ3R5cGXkuI3kuLrnqbrvvIzkuI3kvJrop6blj5FjYW52YXM6Y2xpY2vkuovku7ZcbiAgICAgICAgdGhpcy5lbWl0KCdJbm5lckV2ZW50cycsIHtcbiAgICAgICAgICB0eXBlOiAnbm9kZTptb3VzZURvd24nLFxuICAgICAgICAgIGRhdGE6IHRoaXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLl9jcmVhdGVOb2RlRW5kcG9pbnQoKTtcbiAgICAvLyDkv53mjIF0aXRsZeWuveW6plxuICAgIGlmICghdGhpcy5maWVsZHNMaXN0Lmxlbmd0aCkge1xuICAgICAgJCh0aGlzLmRvbSkuZmluZCgnLnRpdGxlJykuY3NzKCd3aWR0aCcsIHRoaXMub3B0aW9ucy5fZW1wdHlXaWR0aCB8fCAxNTApO1xuICAgIH1cbiAgICBjb25zdCBmaWVsZEl0ZW1zID0gJCh0aGlzLmRvbSkuZmluZCgnLmZpZWxkLWl0ZW0nKTtcbiAgICBjb25zdCBmaWVsZEl0ZW1Eb21zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGZpZWxkSXRlbXMpO1xuICAgIGZpZWxkSXRlbURvbXMuZm9yRWFjaCgoX2ZpZWxkSXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGlmKF9maWVsZEl0ZW0uc2Nyb2xsV2lkdGggPiBfZmllbGRJdGVtLmNsaWVudFdpZHRoKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkSXRlbSA9ICQoZmllbGRJdGVtc1tpbmRleF0pXG4gICAgICAgIFRpcHMuY3JlYXRlVGlwKHtcbiAgICAgICAgICBjbGFzc05hbWU6ICdmaWVsZC1pdGVtLXRvb2x0aXAnLFxuICAgICAgICAgIHRhcmdldERvbTogZmllbGRJdGVtWzBdLFxuICAgICAgICAgIGdlblRpcERvbTogKCkgPT4gZmllbGRJdGVtLnRleHQoKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuICBkcmF3KG9iaikge1xuICAgIGxldCBfZG9tID0gb2JqLmRvbTtcbiAgICBpZiAoIV9kb20pIHtcbiAgICAgIF9kb20gPSAkKCc8ZGl2PjwvZGl2PicpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdub2RlIHRhYmxlLW5vZGUnKVxuICAgICAgICAuYXR0cignaWQnLCBvYmoubmFtZSk7XG4gICAgfVxuICAgIGlmICghXy5pc0VtcHR5KG9iai5vcHRpb25zLl9zb3VyY2VDbGFzc05hbWUpICYmIF8uZ2V0KG9iaiwgJ29wdGlvbnMudHlwZScpID09PSAnc291cmNlJykge1xuICAgICAgX2RvbS5hZGRDbGFzcyhvYmoub3B0aW9ucy5fc291cmNlQ2xhc3NOYW1lKVxuICAgIH1cbiAgICBpZiAoIV8uaXNFbXB0eShvYmoub3B0aW9ucy5fdGFyZ2V0Q2xhc3NOYW1lKSAmJiBfLmdldChvYmosICdvcHRpb25zLnR5cGUnKSA9PT0gJ3RhcmdldCcpIHtcbiAgICAgIF9kb20uYWRkQ2xhc3Mob2JqLm9wdGlvbnMuX3RhcmdldENsYXNzTmFtZSlcbiAgICB9XG4gICAgY29uc3Qgbm9kZSA9ICQoX2RvbSk7XG4gICAgLy8g6K6h566X6IqC54K55Z2Q5qCHXG4gICAgaWYgKG9iai50b3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbm9kZS5jc3MoJ3RvcCcsIGAke29iai50b3AgKyBfLmdldChvYmosICdvcHRpb25zLl9leHRyYVBvcy5wYWRkaW5nVG9wJywgMCl9cHhgKTtcbiAgICB9XG4gICAgaWYgKG9iai5sZWZ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vZGUuY3NzKCdsZWZ0JywgYCR7b2JqLmxlZnQgKyBfLmdldChvYmosICdvcHRpb25zLl9leHRyYVBvcy5wYWRkaW5nTGVmdCcsIDApfXB4YCk7XG4gICAgfVxuXG4gICAgdGhpcy5fY2FsY1NpemUobm9kZSwgb2JqKTtcblxuICAgIHRoaXMuX2NyZWF0ZVRhYmxlTmFtZShub2RlKTsgLy8g6KGo5ZCNXG4gICAgdGhpcy5fY3JlYXRlRmllbGRUaXRsZShub2RlKTsgLy8g5a2X5q615qCH6aKYXG4gICAgdGhpcy5fY3JlYXRlRmllbGRzKG5vZGUpOyAvLyDlrZfmrrVcbiAgICByZXR1cm4gbm9kZVswXTtcbiAgfVxuICBfY3JlYXRlVGFibGVOYW1lKGNvbnRhaW5lciA9IHRoaXMuZG9tKSB7XG4gICAgbGV0IHRpdGxlID0gXy5nZXQodGhpcywgJ29wdGlvbnMudGl0bGUnKTtcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIGxldCB0aXRsZURvbSA9ICQoYDxkaXYgY2xhc3M9XCJ0aXRsZVwiPiR7dGl0bGV9PC9kaXY+YCk7XG4gICAgICB0aXRsZURvbS5jc3Moe1xuICAgICAgICAnaGVpZ2h0JzogdGhpcy5USVRMRV9IRUlHSFQgKyAncHgnLFxuICAgICAgICAnbGluZS1oZWlnaHQnOiB0aGlzLlRJVExFX0hFSUdIVCArICdweCdcbiAgICAgIH0pO1xuICAgICAgJChjb250YWluZXIpLmFwcGVuZCh0aXRsZURvbSk7XG4gICAgfVxuICB9XG4gIF9jcmVhdGVGaWVsZFRpdGxlKGNvbnRhaW5lciA9IHRoaXMuZG9tKSB7XG4gICAgbGV0IGNvbHVtbnMgPSBfLmdldCh0aGlzLCAnb3B0aW9ucy5fY29sdW1ucycsIFtdKTtcbiAgICBsZXQgaGFzRmllbGRUaXRsZSA9IF8uc29tZShjb2x1bW5zLCAoaXRlbSkgPT4ge1xuICAgICAgcmV0dXJuIGl0ZW0udGl0bGU7XG4gICAgfSk7XG4gICAgaWYgKGhhc0ZpZWxkVGl0bGUpIHtcbiAgICAgIGNvbnN0IGNvbHVtbnNUaXRsZURvbSA9ICQoJzxkaXYgY2xhc3M9XCJmaWxlZC10aXRsZVwiPjwvZGl2PicpXG4gICAgICBjb2x1bW5zLmZvckVhY2goX2NvbCA9PiB7XG4gICAgICAgIGNvbnN0IGNvbHVtbnNUaXRsZUl0ZW0gPSAkKGA8c3BhbiBjbGFzcz1cImZpbGVkLXRpdGxlLWl0ZW1cIj4ke19jb2wudGl0bGV9PC9zcGFuPmApO1xuICAgICAgICBjb2x1bW5zVGl0bGVJdGVtLmNzcygnd2lkdGgnLCAoX2NvbC53aWR0aCB8fCB0aGlzLkNPTFVNTl9XSURUSCkgKyAncHgnKTtcbiAgICAgICAgY29sdW1uc1RpdGxlRG9tLmFwcGVuZChjb2x1bW5zVGl0bGVJdGVtKTtcbiAgICAgIH0pO1xuICAgICAgY29sdW1uc1RpdGxlRG9tLmNzcygnaGVpZ2h0JywgdGhpcy5DT0xVTU5TX1RJVExFX0hFSUdIVCArICdweCcpXG4gICAgICAgICAgICAgICAgICAgICAuY3NzKCdsaW5lLWhlaWdodCcsIHRoaXMuQ09MVU1OU19USVRMRV9IRUlHSFQgKyAncHgnKVxuICAgICAgY29udGFpbmVyLmFwcGVuZChjb2x1bW5zVGl0bGVEb20pO1xuICAgIH1cbiAgfVxuICBfY3JlYXRlU29ydGFibGVCdG4oZmllbGQpIHtcbiAgICBsZXQgc29ydEZpZWxkRG9tID0gJChgXG4gICAgICA8c3BhbiBjbGFzcz1cImZpZWxkLXNvcnRcIj5cbiAgICAgICAgPGkgY2xhc3M9XCJkYXRhLW1hcHBpbmctaWNvbiBkYXRhLW1hcHBpbmctaWNvbi1wYWl4dS10b3AgbW92ZS11cFwiPjwvaT5cbiAgICAgICAgPGkgY2xhc3M9XCJkYXRhLW1hcHBpbmctaWNvbiBkYXRhLW1hcHBpbmctaWNvbi1wYWl4dS1ib3R0b20gbW92ZS1kb3duXCI+PC9pPlxuICAgICAgPC9zcGFuPlxuICAgIGApO1xuICAgIHNvcnRGaWVsZERvbS5jc3Moe1xuICAgICAgd2lkdGg6IHRoaXMuU09SVEFCTEVfV0lEVEggKyAncHgnLFxuICAgIH0pO1xuICAgIHNvcnRGaWVsZERvbS5maW5kKCcubW92ZS11cCcpLmNsaWNrKHRoaXMuX21vdmVVcC5iaW5kKHRoaXMsIGZpZWxkKSk7XG4gICAgc29ydEZpZWxkRG9tLmZpbmQoJy5tb3ZlLWRvd24nKS5jbGljayh0aGlzLl9tb3ZlRG93bi5iaW5kKHRoaXMsIGZpZWxkKSk7XG4gICAgcmV0dXJuIHNvcnRGaWVsZERvbTtcbiAgfVxuICBfY3JlYXRlRmllbGRzKGNvbnRhaW5lciA9IHRoaXMuZG9tKSB7XG4gICAgbGV0IGZpZWxkcyA9IF8uZ2V0KHRoaXMsICdvcHRpb25zLmZpZWxkcycpO1xuICAgIGxldCBjb2x1bW5zID0gXy5nZXQodGhpcywgJ29wdGlvbnMuX2NvbHVtbnMnLCBbXSk7XG4gICAgbGV0IHNvcnRhYmxlID0gXy5nZXQodGhpcywgJ29wdGlvbnMuc29ydGFibGUnKTtcbiAgICBsZXQgaXNPYmplY3QgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc29ydGFibGUpID09PSBcIltvYmplY3QgT2JqZWN0XVwiO1xuICAgIGxldCB0eXBlID0gXy5nZXQodGhpcywgJ29wdGlvbnMudHlwZScsICcnKTtcblxuICAgIGlmIChmaWVsZHMgJiYgZmllbGRzLmxlbmd0aCkge1xuICAgICAgZmllbGRzLmZvckVhY2goKF9maWVsZCwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IGZpZWxkRG9tID0gJCgnPGRpdiBjbGFzcz1cImZpZWxkXCI+PC9kaXY+Jyk7XG4gICAgICAgIGxldCBfcHJpbWFyeUtleSA9IGNvbHVtbnNbMF0ua2V5O1xuICAgICAgICBsZXQgc29ydEZpZWxkRG9tID0gdW5kZWZpbmVkO1xuICBcbiAgICAgICAgaWYgKHNvcnRhYmxlICYmIHR5cGVvZihzb3J0YWJsZSkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIHNvcnRGaWVsZERvbSA9IHRoaXMuX2NyZWF0ZVNvcnRhYmxlQnRuKF9maWVsZCk7XG4gICAgICAgIH1cbiAgICAgICAgZmllbGREb20uY3NzKHtcbiAgICAgICAgICBoZWlnaHQ6IHRoaXMuUk9XX0hFSUdIVCArICdweCcsXG4gICAgICAgICAgJ2xpbmUtaGVpZ2h0JzogdGhpcy5ST1dfSEVJR0hUICsgJ3B4J1xuICAgICAgICB9KTtcbiAgICAgICAgY29sdW1ucy5mb3JFYWNoKChfY29sKSA9PiB7XG4gICAgICAgICAgaWYgKF9jb2wucmVuZGVyKSB7XG4gICAgICAgICAgICBsZXQgZmllbGRJdGVtRG9tID0gJChgPHNwYW4gY2xhc3M9XCJmaWVsZC1pdGVtXCI+PC9zcGFuPmApO1xuICAgICAgICAgICAgZmllbGRJdGVtRG9tLmNzcygnd2lkdGgnLCAoX2NvbC53aWR0aCB8fCB0aGlzLkNPTFVNTl9XSURUSCkgKyAncHgnKTtcbiAgICAgICAgICAgIFJlYWN0RE9NLnJlbmRlcihfY29sLnJlbmRlcihfZmllbGRbX2NvbC5rZXldLCBfZmllbGQsIGluZGV4KSwgZmllbGRJdGVtRG9tWzBdKTtcbiAgICAgICAgICAgIGZpZWxkRG9tLmFwcGVuZChmaWVsZEl0ZW1Eb20pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZmllbGRJdGVtRG9tID0gJChgPHNwYW4gY2xhc3M9XCJmaWVsZC1pdGVtXCI+JHtfZmllbGRbX2NvbC5rZXldfTwvc3Bhbj5gKTtcbiAgICAgICAgICAgIGZpZWxkSXRlbURvbS5jc3MoJ3dpZHRoJywgKF9jb2wud2lkdGggfHwgdGhpcy5DT0xVTU5fV0lEVEgpICsgJ3B4Jyk7XG4gICAgICAgICAgICBmaWVsZERvbS5hcHBlbmQoZmllbGRJdGVtRG9tKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF9jb2wucHJpbWFyeUtleSkge1xuICAgICAgICAgICAgX3ByaW1hcnlLZXkgPSBfY29sLmtleTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc29ydEZpZWxkRG9tKSB7XG4gICAgICAgICAgZmllbGREb20uYXBwZW5kKHNvcnRGaWVsZERvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdzb3VyY2UnKSB7XG4gICAgICAgICAgbGV0IHJpZ2h0UG9pbnQgPSAkKCc8ZGl2IGNsYXNzPVwicG9pbnQgcmlnaHQtcG9pbnRcIj48L2Rpdj4nKTtcbiAgICAgICAgICBmaWVsZERvbS5hcHBlbmQocmlnaHRQb2ludCk7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0ICYmIHNvcnRhYmxlLnNvdXJjZSkge1xuICAgICAgICAgICAgc29ydEZpZWxkRG9tID0gdGhpcy5fY3JlYXRlU29ydGFibGVCdG4oX2ZpZWxkKTtcbiAgICAgICAgICAgIGZpZWxkRG9tLmFwcGVuZChzb3J0RmllbGREb20pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ3RhcmdldCcpIHtcbiAgICAgICAgICBsZXQgbGVmdFBvaW50ID0gJCgnPGRpdiBjbGFzcz1cInBvaW50IGxlZnQtcG9pbnRcIj48L2Rpdj4nKTtcbiAgICAgICAgICBmaWVsZERvbS5hcHBlbmQobGVmdFBvaW50KTtcbiAgICAgICAgICBpZiAoaXNPYmplY3QgJiYgc29ydGFibGUudGFyZ2V0KSB7XG4gICAgICAgICAgICBzb3J0RmllbGREb20gPSB0aGlzLl9jcmVhdGVTb3J0YWJsZUJ0bihfZmllbGQpO1xuICAgICAgICAgICAgZmllbGREb20uYXBwZW5kKHNvcnRGaWVsZERvbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoZmllbGREb20pO1xuICAgICAgICB0aGlzLmZpZWxkc0xpc3QucHVzaCh7XG4gICAgICAgICAgaWQ6IF9maWVsZFtfcHJpbWFyeUtleV0sXG4gICAgICAgICAgZG9tOiBmaWVsZERvbVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBfZW1wdHlDb250ZW50ID0gXy5nZXQodGhpcy5vcHRpb25zLCAnX2VtcHR5Q29udGVudCcpO1xuICAgICAgY29uc3Qgbm9EYXRhVHJlZSA9IGVtcHR5RG9tKHtcbiAgICAgICAgY29udGVudDogX2VtcHR5Q29udGVudCxcbiAgICAgICAgd2lkdGg6IHRoaXMub3B0aW9ucy5fZW1wdHlXaWR0aFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnRhaW5lci5hcHBlbmQobm9EYXRhVHJlZSk7XG4gICAgfVxuICB9XG4gIF9jcmVhdGVOb2RlRW5kcG9pbnQoKSB7XG4gICAgbGV0IHR5cGUgPSB0aGlzLm9wdGlvbnMudHlwZTtcbiAgICB0aGlzLmZpZWxkc0xpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy5hZGRFbmRwb2ludCh7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICBvcmllbnRhdGlvbjogdHlwZSA9PT0gJ3NvdXJjZScgPyBbMSwwXSA6IFstMSwwXSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgX2lzTm9kZVNlbGY6IHRydWUsXG4gICAgICAgIGRvbTogaXRlbS5kb21bMF0sXG4gICAgICAgIENsYXNzOiBFbmRwb2ludFxuICAgICAgfSk7XG4gICAgICBpZiAodHlwZSA9PT0gJ3NvdXJjZScpIHtcbiAgICAgICAgdGhpcy5hZGRFbmRwb2ludCh7XG4gICAgICAgICAgaWQ6IGl0ZW0uaWQgKyAnLXJpZ2h0JyxcbiAgICAgICAgICBvcmllbnRhdGlvbjogWzEsMF0sXG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICBfaXNOb2RlU2VsZjogZmFsc2UsXG4gICAgICAgICAgZG9tOiAkKGl0ZW0uZG9tKS5maW5kKCcucmlnaHQtcG9pbnQnKVswXSxcbiAgICAgICAgICBDbGFzczogRW5kcG9pbnQsXG4gICAgICAgICAgbGlua2FibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndGFyZ2V0Jykge1xuICAgICAgICB0aGlzLmFkZEVuZHBvaW50KHtcbiAgICAgICAgICBpZDogaXRlbS5pZCArICctbGVmdCcsXG4gICAgICAgICAgb3JpZW50YXRpb246IFstMSwwXSxcbiAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgIF9pc05vZGVTZWxmOiBmYWxzZSxcbiAgICAgICAgICBkb206ICQoaXRlbS5kb20pLmZpbmQoJy5sZWZ0LXBvaW50JylbMF0sXG4gICAgICAgICAgQ2xhc3M6IEVuZHBvaW50LFxuICAgICAgICAgIGRpc0xpbmthYmxlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBfY2FsY1NpemUobm9kZSwgb2JqKSB7XG4gICAgbGV0IGhhc1RpdGxlID0gXy5nZXQob2JqLCAnb3B0aW9ucy50aXRsZScpO1xuICAgIGxldCBmaWVsZHMgPSBfLmdldChvYmosICdvcHRpb25zLmZpZWxkcycsIFtdKTtcbiAgICBsZXQgc29ydGFibGUgPSBfLmdldChvYmosICdvcHRpb25zLnNvcnRhYmxlJyk7XG4gICAgbGV0IHR5cGUgPSBfLmdldChvYmosICdvcHRpb25zLnR5cGUnKTtcblxuICAgIGlmIChoYXNUaXRsZSkge1xuICAgICAgdGhpcy5oZWlnaHQgKz0gdGhpcy5USVRMRV9IRUlHSFQ7XG4gICAgfVxuICAgIHRoaXMuaGVpZ2h0ICs9IGZpZWxkcy5sZW5ndGggKiB0aGlzLlJPV19IRUlHSFQ7XG4gICAgXG4gICAgbGV0IGNvbHVtbnMgPSBfLmdldChvYmosICdvcHRpb25zLl9jb2x1bW5zJyk7XG4gICAgY29sdW1ucy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICB0aGlzLndpZHRoICs9IGl0ZW0ud2lkdGggfHwgdGhpcy5DT0xVTU5fV0lEVEg7XG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mKHNvcnRhYmxlKSA9PT0gJ2Jvb2xlYW4nKSB0aGlzLndpZHRoICs9IHRoaXMuU09SVEFCTEVfV0lEVEg7XG4gICAgXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzb3J0YWJsZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ3NvdXJjZScpIHRoaXMud2lkdGggKz0gdGhpcy5TT1JUQUJMRV9XSURUSDtcbiAgICAgIGlmICh0eXBlID09PSAndGFyZ2V0JykgdGhpcy53aWR0aCArPSB0aGlzLlNPUlRBQkxFX1dJRFRIO1xuICAgIH1cbiAgICAvLyB0b2RvOiDorrDlvpfnrpfkuIpTT1JUQUJMRV9XSURUSFxuICB9XG5cbiAgX21vdmVVcChjdXJGaWVsZCwgZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGxldCBjdXJJbmRleCA9IHRoaXMuZmllbGRzTGlzdC5maW5kSW5kZXgoaSA9PiBpLmlkID09PSBjdXJGaWVsZC5pZCk7XG4gICAgbGV0IG9sZEZpZWxkcyA9IF8uZ2V0KHRoaXMsICdvcHRpb25zLmZpZWxkcycsIFtdKTtcbiAgICBsZXQgb2xkRmllbGRzSXRlbSA9IG9sZEZpZWxkcy5zcGxpY2UoY3VySW5kZXgsIDEpO1xuICAgIGxldCBwb2ludCA9IHRoaXMuZ2V0RW5kcG9pbnQoY3VyRmllbGQuaWQpO1xuICAgIGxldCBjdXJGaWVsZERvbSA9IHBvaW50LmRvbTtcbiAgICBsZXQgY3VyRmllbGREYXRhID0gdGhpcy5maWVsZHNMaXN0W2N1ckluZGV4XTtcbiAgICAvLyDlpITnkIbovrnnlYxcbiAgICBpZiAoY3VySW5kZXggPT09IDApIHtcbiAgICAgIGNvbnNvbGUud2FybigndGhpcyBmaWVsZCBoYXMgcmVhY2ggdGhlIHRvcCEnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHByZUZpZWxkRGF0YSA9IHRoaXMuZmllbGRzTGlzdFtjdXJJbmRleCAtIDFdO1xuICAgIGxldCBwcmVGaWVsZERvbSA9IHByZUZpZWxkRGF0YS5kb207XG5cbiAgICAvLyDkuqTmjaJkb21cbiAgICAkKHByZUZpZWxkRG9tKS5iZWZvcmUoY3VyRmllbGREb20pO1xuXG4gICAgLy8g5Lqk5o2i5pWw5o2uXG4gICAgdGhpcy5maWVsZHNMaXN0W2N1ckluZGV4XSA9IHByZUZpZWxkRGF0YTtcbiAgICB0aGlzLmZpZWxkc0xpc3RbY3VySW5kZXggLSAxXSA9IGN1ckZpZWxkRGF0YTtcbiAgICBvbGRGaWVsZHMuc3BsaWNlKGN1ckluZGV4IC0gMSwgMCwgb2xkRmllbGRzSXRlbVswXSk7XG5cbiAgICAvLyDlj5HpgIHkuovku7bvvIzmm7TmlrDnur/mrrXlkozplJrngrnlnZDmoIdcbiAgICB0aGlzLmVtaXQoJ2N1c3RvbS5maWVsZC5zb3J0Jywge1xuICAgICAgbm9kZUlkOiB0aGlzLmlkLFxuICAgICAgcG9pbnRJZHM6IFtjdXJGaWVsZERhdGEuaWQsIHByZUZpZWxkRGF0YS5pZF1cbiAgICB9KTtcbiAgfVxuXG4gIF9tb3ZlRG93bihjdXJGaWVsZCwgZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGxldCBjdXJJbmRleCA9IHRoaXMuZmllbGRzTGlzdC5maW5kSW5kZXgoaSA9PiBpLmlkID09PSBjdXJGaWVsZC5pZCk7XG4gICAgbGV0IG9sZEZpZWxkcyA9IF8uZ2V0KHRoaXMsICdvcHRpb25zLmZpZWxkcycsIFtdKTtcbiAgICBsZXQgb2xkRmllbGRzSXRlbSA9IG9sZEZpZWxkcy5zcGxpY2UoY3VySW5kZXgsIDEpO1xuICAgIGxldCBwb2ludCA9IHRoaXMuZ2V0RW5kcG9pbnQoY3VyRmllbGQuaWQpO1xuICAgIGxldCBjdXJGaWVsZERvbSA9IHBvaW50LmRvbTtcbiAgICBsZXQgY3VyRmllbGREYXRhID0gdGhpcy5maWVsZHNMaXN0W2N1ckluZGV4XTtcbiAgICAvLyDlpITnkIbovrnnlYxcbiAgICBpZiAoY3VySW5kZXggPT09IHRoaXMuZmllbGRzTGlzdC5sZW5ndGggLSAxKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ3RoaXMgZmllbGQgaGFzIHJlYWNoIHRoZSBib3R0b20hJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBuZXh0RmllbGREYXRhID0gdGhpcy5maWVsZHNMaXN0W2N1ckluZGV4ICsgMV07XG4gICAgbGV0IG5leHRGaWVsZERvbSA9IG5leHRGaWVsZERhdGEuZG9tO1xuXG4gICAgLy8g5Lqk5o2iZG9tXG4gICAgJChuZXh0RmllbGREb20pLmFmdGVyKGN1ckZpZWxkRG9tKTtcblxuICAgIC8vIOS6pOaNouaVsOaNrlxuICAgIHRoaXMuZmllbGRzTGlzdFtjdXJJbmRleF0gPSBuZXh0RmllbGREYXRhO1xuICAgIHRoaXMuZmllbGRzTGlzdFtjdXJJbmRleCArIDFdID0gY3VyRmllbGREYXRhO1xuICAgIG9sZEZpZWxkcy5zcGxpY2UoY3VySW5kZXggKyAxLCAwLCBvbGRGaWVsZHNJdGVtWzBdKTtcblxuICAgIC8vIOWPkemAgeS6i+S7tu+8jOabtOaWsOe6v+auteWSjOmUmueCueWdkOagh1xuICAgIHRoaXMuZW1pdCgnY3VzdG9tLmZpZWxkLnNvcnQnLCB7XG4gICAgICBub2RlSWQ6IHRoaXMuaWQsXG4gICAgICBwb2ludElkczogW2N1ckZpZWxkRGF0YS5pZCwgbmV4dEZpZWxkRGF0YS5pZF1cbiAgICB9KTtcbiAgICBcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFRhYmxlTm9kZSBmcm9tICcuL2NhbnZhcy9ub2RlJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGxldCB0cmFuc2Zvcm1Jbml0RGF0YSA9IChkYXRhKSA9PiB7XG4gIGxldCB7XG4gICAgY29sdW1ucywgc291cmNlRGF0YSwgdGFyZ2V0RGF0YSxcbiAgICBtYXBwaW5nRGF0YSwgdHlwZSwgZXh0cmFQb3MsXG4gICAgc29ydGFibGUsIGVtcHR5Q29udGVudCwgZW1wdHlXaWR0aCxcbiAgICBzb3VyY2VDbGFzc05hbWUsIHRhcmdldENsYXNzTmFtZVxuICB9ID0gZGF0YTtcbiAgY29uc3QgX2dlbk5vZGVzID0gKGRhdGEsIG5vZGVUeXBlLCBjb21UeXBlKSA9PiB7XG4gICAgaWYgKGNvbVR5cGUgPT09ICdzaW5nbGUnICYmIGRhdGEuY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgcmV0dXJuIFtfLmFzc2lnbih7XG4gICAgICAgIGlkOiBub2RlVHlwZSxcbiAgICAgICAgdHlwZTogbm9kZVR5cGUsXG4gICAgICAgIF9jb2x1bW5zOiBjb2x1bW5zLFxuICAgICAgICBfZXh0cmFQb3M6IGV4dHJhUG9zLFxuICAgICAgICBDbGFzczogVGFibGVOb2RlLFxuICAgICAgICBfZW1wdHlDb250ZW50OiBlbXB0eUNvbnRlbnQsXG4gICAgICAgIF9lbXB0eVdpZHRoOiBlbXB0eVdpZHRoLFxuICAgICAgICBfc291cmNlQ2xhc3NOYW1lOiBzb3VyY2VDbGFzc05hbWUsXG4gICAgICAgIF90YXJnZXRDbGFzc05hbWU6IHRhcmdldENsYXNzTmFtZSxcbiAgICAgICAgc29ydGFibGVcbiAgICAgIH0sIGRhdGEpXTtcbiAgICB9IGVsc2UgaWYgKGNvbVR5cGUgPT09ICdtdXRpcGx5JyAmJiBkYXRhLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgcmV0dXJuIGRhdGEubWFwKChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiBfLmFzc2lnbih7XG4gICAgICAgICAgdHlwZTogbm9kZVR5cGUsXG4gICAgICAgICAgX2NvbHVtbnM6IGNvbHVtbnMsXG4gICAgICAgICAgX2V4dHJhUG9zOiBleHRyYVBvcyxcbiAgICAgICAgICBDbGFzczogVGFibGVOb2RlLFxuICAgICAgICAgIF9lbXB0eUNvbnRlbnQ6IGVtcHR5Q29udGVudCxcbiAgICAgICAgICBfZW1wdHlXaWR0aDogZW1wdHlXaWR0aCxcbiAgICAgICAgICBfc291cmNlQ2xhc3NOYW1lOiBzb3VyY2VDbGFzc05hbWUsXG4gICAgICAgICAgX3RhcmdldENsYXNzTmFtZTogdGFyZ2V0Q2xhc3NOYW1lLFxuICAgICAgICAgIHNvcnRhYmxlXG4gICAgICAgIH0sIGl0ZW0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGxldCBzb3VyY2VOb2RlcyA9IF9nZW5Ob2Rlcyhzb3VyY2VEYXRhLCAnc291cmNlJywgdHlwZSk7XG4gIGxldCB0YXJnZXROb2RlcyA9IF9nZW5Ob2Rlcyh0YXJnZXREYXRhLCAndGFyZ2V0JywgdHlwZSk7XG4gIGxldCBlZGdlcyA9IG1hcHBpbmdEYXRhLm1hcCgoaXRlbSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogYCR7aXRlbS5zb3VyY2V9LSR7aXRlbS50YXJnZXR9YCxcbiAgICAgIHR5cGU6ICdlbmRwb2ludCcsXG4gICAgICBzb3VyY2VOb2RlOiBpdGVtLnNvdXJjZU5vZGUgfHwgc291cmNlTm9kZXNbMF0uaWQsXG4gICAgICBzb3VyY2U6IGl0ZW0uc291cmNlLFxuICAgICAgdGFyZ2V0Tm9kZTogaXRlbS50YXJnZXROb2RlIHx8IHRhcmdldE5vZGVzWzBdLmlkLFxuICAgICAgdGFyZ2V0OiBpdGVtLnRhcmdldCxcbiAgICAgIF9pc0Nvbm5lY3Q6IGRhdGEuaXNDb25uZWN0XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBub2RlczogW10uY29uY2F0KHNvdXJjZU5vZGVzKS5jb25jYXQodGFyZ2V0Tm9kZXMpLFxuICAgIGVkZ2VzOiBlZGdlc1xuICB9O1xufTtcblxuZXhwb3J0IGxldCB0cmFuc2Zvcm1DaGFuZ2VEYXRhID0gKGRhdGEsIGNvbVR5cGUpID0+IHtcbiAgbGV0IHJlc3VsdCA9IHtcbiAgICBtYXBwaW5nRGF0YTogW10sXG4gICAgc291cmNlRGF0YTogW10sXG4gICAgdGFyZ2V0RGF0YTogW11cbiAgfTtcbiAgbGV0IHNvdXJjZU5vZGVzID0gZGF0YS5ub2Rlcy5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICByZXR1cm4gaXRlbS5vcHRpb25zLnR5cGUgPT09ICdzb3VyY2UnO1xuICB9KTtcbiAgbGV0IHRhcmdldE5vZGVzID0gZGF0YS5ub2Rlcy5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICByZXR1cm4gaXRlbS5vcHRpb25zLnR5cGUgPT09ICd0YXJnZXQnO1xuICB9KTtcbiAgaWYgKGNvbVR5cGUgPT09ICdzaW5nbGUnKSB7XG4gICAgbGV0IF9zb3VyY2VOb2RlID0gc291cmNlTm9kZXNbMF07XG4gICAgbGV0IF90YXJnZXROb2RlID0gdGFyZ2V0Tm9kZXNbMF07XG4gICAgcmVzdWx0Lm1hcHBpbmdEYXRhID0gZGF0YS5lZGdlcy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogaXRlbS5zb3VyY2VFbmRwb2ludC5vcmlnaW5JZCxcbiAgICAgICAgdGFyZ2V0OiBpdGVtLnRhcmdldEVuZHBvaW50Lm9yaWdpbklkXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnNvdXJjZURhdGEgPSB7XG4gICAgICB0aXRsZTogXy5nZXQoX3NvdXJjZU5vZGUsICdvcHRpb25zLnRpdGxlJyksXG4gICAgICBmaWVsZHM6IF8uZ2V0KF9zb3VyY2VOb2RlLCAnb3B0aW9ucy5maWVsZHMnKVxuICAgIH07XG4gICAgcmVzdWx0LnRhcmdldERhdGEgPSB7XG4gICAgICB0aXRsZTogXy5nZXQoX3RhcmdldE5vZGUsICdvcHRpb25zLnRpdGxlJyksXG4gICAgICBmaWVsZHM6IF8uZ2V0KF90YXJnZXROb2RlLCAnb3B0aW9ucy5maWVsZHMnKVxuICAgIH07XG4gIH0gZWxzZSBpZiAoY29tVHlwZSA9PT0gJ211dGlwbHknKSB7XG4gICAgcmVzdWx0Lm1hcHBpbmdEYXRhID0gZGF0YS5lZGdlcy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZU5vZGU6IGl0ZW0uc291cmNlTm9kZS5pZCxcbiAgICAgICAgdGFyZ2V0Tm9kZTogaXRlbS50YXJnZXROb2RlLmlkLFxuICAgICAgICBzb3VyY2U6IGl0ZW0uc291cmNlRW5kcG9pbnQub3JpZ2luSWQsXG4gICAgICAgIHRhcmdldDogaXRlbS50YXJnZXRFbmRwb2ludC5vcmlnaW5JZFxuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc3VsdC5zb3VyY2VEYXRhID0gc291cmNlTm9kZXMubWFwKChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZTogXy5nZXQoaXRlbSwgJ29wdGlvbnMudGl0bGUnKSxcbiAgICAgICAgZmllbGRzOiBfLmdldChpdGVtLCAnb3B0aW9ucy5maWVsZHMnKVxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXN1bHQudGFyZ2V0RGF0YSA9IHRhcmdldE5vZGVzLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IF8uZ2V0KGl0ZW0sICdvcHRpb25zLnRpdGxlJyksXG4gICAgICAgIGZpZWxkczogXy5nZXQoaXRlbSwgJ29wdGlvbnMuZmllbGRzJylcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iXSwibmFtZXMiOlsiTWFwcGluZENhbnZhcyIsIm9wdHMiLCJwb2ludCIsIl9ub2RlIiwiZ2V0Tm9kZSIsIm5vZGVJZCIsIl9wb2ludCIsInVuZGVmaW5lZCIsIm9yaWdpbklkIiwiZ2V0RW5kcG9pbnQiLCJleHRyYVBvcyIsInNvdXJjZVRvcCIsIl8iLCJnZXQiLCJzb3VyY2VMZWZ0Iiwic291Y2VOb2RlcyIsIm5vZGVzIiwiZmlsdGVyIiwiaXRlbSIsIm9wdGlvbnMiLCJ0eXBlIiwibWFwIiwibW92ZVRvIiwiaGVpZ2h0IiwiUEFERElOR19WRVJUSUNBTCIsInRhcmdldFRvcCIsInRhcmdldExlZnQiLCJmb3JFYWNoIiwidG90YWxIZWlnaHQiLCJ0b3RsZVdpZHRoIiwiX3NvdXJjZUhlaWdodCIsIl90YXJnZXRIZWlnaHQiLCJ0YXJnZXROb2RlcyIsIiQiLCJyb290IiwiY3NzIiwidXBkYXRlUm9vdFJlc2l6ZSIsImxpbmtzIiwiZWRnZSIsIl9zb3VyY2VFbmRwb2ludCIsIl9nZXRFbmRwb2ludCIsInNvdXJjZUVuZHBvaW50IiwiX3RhcmdldEVuZHBvaW50IiwidGFyZ2V0RW5kcG9pbnQiLCJkb20iLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiZWRnZXMiLCJfZmluZENoYWluIiwiX2NoYW5nZUZvdWNzU3RhdHVzIiwic3RhdHVzIiwiYXJyb3dEb20iLCJuZWlnaGJvckVkZ2VzIiwiZ2V0TmVpZ2hib3JFZGdlcyIsInRhcmdldHNFZGdlcyIsImlkIiwidGFyZ2V0RWRnZSIsIl9saW5rTnVtcyIsIl9lZGdlIiwibGVuZ3RoIiwiX2lzVmFsaWRMaW5rIiwiX3BvaW50TGltaXRlZE51bSIsImxpbWl0TnVtIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic291cmNlIiwidGFyZ2V0IiwiY29uc29sZSIsIndhcm4iLCJkZXN0cm95IiwiX2RyYWdFZGdlcyIsIl9kcmFnVHlwZSIsIkNhbnZhcyIsImlzUmVhY3RFbGUiLCJIVE1MRWxlbWVudCIsIlJlYWN0IiwiaXNWYWxpZEVsZW1lbnQiLCJjb25maWciLCJjb250ZW50Iiwid2lkdGgiLCJlbXB0eURvbSIsIlJlYWN0RE9NIiwicmVuZGVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaWNvbkRvbSIsImFwcGVuZCIsIk5ld0VuZFBvaW50IiwiX2lzTm9kZVNlbGYiLCJyZXBsYWNlIiwib24iLCJlIiwiTEVGVF9LRVkiLCJidXR0b24iLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNsYXNzbmFtZSIsImNsYXNzTmFtZSIsImluZGV4T2YiLCJlbWl0IiwiZGF0YSIsIkVuZHBvaW50IiwiVGFibGVOb2RlIiwiVElUTEVfSEVJR0hUIiwiQ09MVU1OU19USVRMRV9IRUlHSFQiLCJDT0xVTU5fV0lEVEgiLCJST1dfSEVJR0hUIiwiUEFERElOR19IT1JJWk9OVEFMIiwiU09SVEFCTEVfV0lEVEgiLCJmaWVsZHNMaXN0IiwiZHJhZ2dhYmxlIiwiX2lzTW92aW5nIiwiX2NyZWF0ZU5vZGVFbmRwb2ludCIsImZpbmQiLCJfZW1wdHlXaWR0aCIsImZpZWxkSXRlbXMiLCJmaWVsZEl0ZW1Eb21zIiwiQXJyYXkiLCJzbGljZSIsImFwcGx5IiwiX2ZpZWxkSXRlbSIsImluZGV4Iiwic2Nyb2xsV2lkdGgiLCJjbGllbnRXaWR0aCIsImZpZWxkSXRlbSIsIlRpcHMiLCJjcmVhdGVUaXAiLCJ0YXJnZXREb20iLCJnZW5UaXBEb20iLCJ0ZXh0Iiwib2JqIiwiX2RvbSIsImF0dHIiLCJuYW1lIiwiX3NvdXJjZUNsYXNzTmFtZSIsIl90YXJnZXRDbGFzc05hbWUiLCJub2RlIiwidG9wIiwibGVmdCIsIl9jYWxjU2l6ZSIsIl9jcmVhdGVUYWJsZU5hbWUiLCJfY3JlYXRlRmllbGRUaXRsZSIsIl9jcmVhdGVGaWVsZHMiLCJjb250YWluZXIiLCJ0aXRsZSIsInRpdGxlRG9tIiwiY29sdW1ucyIsImhhc0ZpZWxkVGl0bGUiLCJjb2x1bW5zVGl0bGVEb20iLCJfY29sIiwiY29sdW1uc1RpdGxlSXRlbSIsImZpZWxkIiwic29ydEZpZWxkRG9tIiwiY2xpY2siLCJfbW92ZVVwIiwiYmluZCIsIl9tb3ZlRG93biIsImZpZWxkcyIsInNvcnRhYmxlIiwiaXNPYmplY3QiLCJfZmllbGQiLCJmaWVsZERvbSIsIl9wcmltYXJ5S2V5Iiwia2V5IiwiX2NyZWF0ZVNvcnRhYmxlQnRuIiwiZmllbGRJdGVtRG9tIiwicHJpbWFyeUtleSIsInJpZ2h0UG9pbnQiLCJsZWZ0UG9pbnQiLCJwdXNoIiwiX2VtcHR5Q29udGVudCIsIm5vRGF0YVRyZWUiLCJhZGRFbmRwb2ludCIsIm9yaWVudGF0aW9uIiwiQ2xhc3MiLCJsaW5rYWJsZSIsImRpc0xpbmthYmxlIiwiaGFzVGl0bGUiLCJjdXJGaWVsZCIsImV2ZW50IiwiY3VySW5kZXgiLCJmaW5kSW5kZXgiLCJpIiwib2xkRmllbGRzIiwib2xkRmllbGRzSXRlbSIsInNwbGljZSIsImN1ckZpZWxkRG9tIiwiY3VyRmllbGREYXRhIiwicHJlRmllbGREYXRhIiwicHJlRmllbGREb20iLCJiZWZvcmUiLCJwb2ludElkcyIsIm5leHRGaWVsZERhdGEiLCJuZXh0RmllbGREb20iLCJhZnRlciIsIk5vZGUiLCJ0cmFuc2Zvcm1Jbml0RGF0YSIsInNvdXJjZURhdGEiLCJ0YXJnZXREYXRhIiwibWFwcGluZ0RhdGEiLCJlbXB0eUNvbnRlbnQiLCJlbXB0eVdpZHRoIiwic291cmNlQ2xhc3NOYW1lIiwidGFyZ2V0Q2xhc3NOYW1lIiwiX2dlbk5vZGVzIiwibm9kZVR5cGUiLCJjb21UeXBlIiwiY29uc3RydWN0b3IiLCJfY29sdW1ucyIsIl9leHRyYVBvcyIsInNvdXJjZU5vZGVzIiwic291cmNlTm9kZSIsInRhcmdldE5vZGUiLCJfaXNDb25uZWN0IiwiaXNDb25uZWN0IiwiY29uY2F0IiwidHJhbnNmb3JtQ2hhbmdlRGF0YSIsInJlc3VsdCIsIl9zb3VyY2VOb2Rl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U0FBaEIsRUFBMkI7QUFDaENXLElBQUFBLE1BQU0sQ0FBQ2xCLFdBQVAsR0FBcUJuRyxJQUFJLENBQUN2RCxLQUFMLENBQVcxQixHQUFYLENBQWUsVUFBQ0gsSUFBRCxFQUFVO0FBQzVDLGFBQU87QUFDTG1NLFFBQUFBLFVBQVUsRUFBRW5NLElBQUksQ0FBQ21NLFVBQUwsQ0FBZ0I5SixFQUR2QjtBQUVMK0osUUFBQUEsVUFBVSxFQUFFcE0sSUFBSSxDQUFDb00sVUFBTCxDQUFnQi9KLEVBRnZCO0FBR0xZLFFBQUFBLE1BQU0sRUFBRWpELElBQUksQ0FBQ3VCLGNBQUwsQ0FBb0JqQyxRQUh2QjtBQUlMNEQsUUFBQUEsTUFBTSxFQUFFbEQsSUFBSSxDQUFDeUIsY0FBTCxDQUFvQm5DO0FBSnZCLE9BQVA7QUFNRCxLQVBvQixDQUFyQjtBQVFBbU4sSUFBQUEsTUFBTSxDQUFDcEIsVUFBUCxHQUFvQmEsV0FBVyxDQUFDL0wsR0FBWixDQUFnQixVQUFDSCxJQUFELEVBQVU7QUFDNUMsYUFBTztBQUNMZ0ksUUFBQUEsS0FBSyxFQUFFdEksR0FBQSxDQUFNTSxJQUFOLEVBQVksZUFBWixDQURGO0FBRUw2SSxRQUFBQSxNQUFNLEVBQUVuSixHQUFBLENBQU1NLElBQU4sRUFBWSxnQkFBWjtBQUZILE9BQVA7QUFJRCxLQUxtQixDQUFwQjtBQU1BeU0sSUFBQUEsTUFBTSxDQUFDbkIsVUFBUCxHQUFvQnhLLFdBQVcsQ0FBQ1gsR0FBWixDQUFnQixVQUFDSCxJQUFELEVBQVU7QUFDNUMsYUFBTztBQUNMZ0ksUUFBQUEsS0FBSyxFQUFFdEksR0FBQSxDQUFNTSxJQUFOLEVBQVksZUFBWixDQURGO0FBRUw2SSxRQUFBQSxNQUFNLEVBQUVuSixHQUFBLENBQU1NLElBQU4sRUFBWSxnQkFBWjtBQUZILE9BQVA7QUFJRCxLQUxtQixDQUFwQjtBQU1EOztBQUNELFNBQU95TSxNQUFQO0FBQ0QsQ0FwRE07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
